{"ast":null,"code":"var errors = require('./errors');\n\nvar Collections = function Collections() {\n  this.initialize.apply(this, arguments);\n};\n\nCollections.prototype = {\n  initialize: function initialize(client, token) {\n    /**\n     * Initialize a feed object\n     * @method intialize\n     * @memberof Collections.prototype\n     * @param {StreamCloudClient} client Stream client this collection is constructed from\n     * @param {string} token JWT token\n     */\n    this.client = client;\n    this.token = token;\n  },\n  buildURL: function buildURL(collection, itemId) {\n    var url = 'collections/' + collection + '/';\n\n    if (itemId === undefined) {\n      return url;\n    }\n\n    return url + itemId + '/';\n  },\n  entry: function entry(collection, itemId, itemData) {\n    return new CollectionEntry(this, collection, itemId, itemData);\n  },\n  get: function get(collection, itemId, callback) {\n    /**\n     * get item from collection\n     * @method get\n     * @memberof Collections.prototype\n     * @param  {string}   collection  collection name\n     * @param  {object}   itemId  id for this entry\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example collection.get(\"food\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\")\n     */\n    var self = this;\n    return this.client.get({\n      url: this.buildURL(collection, itemId),\n      signature: this.token\n    }).then(function (response) {\n      var entry = self.client.collections.entry(response.collection, response.id, response.data);\n      entry.full = response;\n\n      if (callback) {\n        callback(entry);\n      }\n\n      return entry;\n    });\n  },\n  add: function add(collection, itemId, itemData, callback) {\n    /**\n     * Add item to collection\n     * @method add\n     * @memberof Collections.prototype\n     * @param  {string}   collection  collection name\n     * @param  {string}   itemId  entry id\n     * @param  {object}   itemData  ObjectStore data\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example collection.add(\"food\", \"cheese101\", {\"name\": \"cheese burger\",\"toppings\": \"cheese\"})\n     */\n    var self = this;\n\n    if (itemId === null) {\n      itemId = undefined;\n    }\n\n    var body = {\n      id: itemId,\n      data: itemData\n    };\n    return this.client.post({\n      url: this.buildURL(collection),\n      body: body,\n      signature: this.token\n    }).then(function (response) {\n      var entry = self.client.collections.entry(response.collection, response.id, response.data);\n      entry.full = response;\n\n      if (callback) {\n        callback(entry);\n      }\n\n      return entry;\n    });\n  },\n  update: function update(collection, entryId, data, callback) {\n    /**\n     * Update entry in the collection\n     * @method update\n     * @memberof Collections.prototype\n     * @param  {string}   collection  collection name\n     * @param  {object}   entryId  Collection object id\n     * @param  {object}   data  ObjectStore data\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example store.update(\"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", {\"name\": \"cheese burger\",\"toppings\": \"cheese\"})\n     * @example store.update(\"food\", \"cheese101\", {\"name\": \"cheese burger\",\"toppings\": \"cheese\"})\n     */\n    var self = this;\n    var body = {\n      data: data\n    };\n    return this.client.put({\n      url: this.buildURL(collection, entryId),\n      body: body,\n      signature: this.token\n    }).then(function (response) {\n      var entry = self.client.collections.entry(response.collection, response.id, response.data);\n      entry.full = response;\n\n      if (callback) {\n        callback(entry);\n      }\n\n      return entry;\n    });\n  },\n  delete: function _delete(collection, entryId, callback) {\n    /**\n     * Delete entry from collection\n     * @method delete\n     * @memberof Collections.prototype\n     * @param  {object}   entryId  Collection entry id\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example collection.delete(\"food\", \"cheese101\")\n     */\n    return this.client['delete']({\n      url: this.buildURL(collection, entryId),\n      signature: this.token\n    }, callback);\n  },\n  upsert: function upsert(collection, data, callback) {\n    /**\n     * Upsert one or more items within a collection.\n     *\n     * @method upsert\n     * @memberof Collections.prototype\n     * @param {object|array} data - A single json object or an array of objects\n     * @param {requestCallback} callback - Callback to call on completion\n     * @return {Promise} Promise object.\n     */\n    if (!this.client.usingApiSecret) {\n      throw new errors.SiteError('This method can only be used server-side using your API Secret');\n    }\n\n    var last = arguments[arguments.length - 1]; // callback is always the last argument\n\n    callback = last.call ? last : undefined;\n\n    if (!Array.isArray(data)) {\n      data = [data];\n    }\n\n    var data_json = {\n      data: {}\n    };\n    data_json['data'][collection] = data;\n    return this.client.post({\n      url: 'collections/',\n      serviceName: 'api',\n      body: data_json,\n      signature: this.client.getCollectionsToken()\n    }, callback);\n  },\n  select: function select(collection, ids, callback) {\n    /**\n     * Select all objects with ids from the collection.\n     *\n     * @method select\n     * @memberof Collections.prototype\n     * @param {object|array} ids - A single json object or an array of objects\n     * @param {requestCallback} callback - Callback to call on completion\n     * @return {Promise} Promise object.\n     */\n    if (!this.client.usingApiSecret) {\n      throw new errors.SiteError('This method can only be used server-side using your API Secret');\n    }\n\n    var last = arguments[arguments.length - 1]; // callback is always the last argument\n\n    callback = last.call ? last : undefined;\n\n    if (!Array.isArray(ids)) {\n      ids = [ids];\n    }\n\n    var params = {\n      foreign_ids: ids.map(function (id) {\n        return collection + ':' + id;\n      }).join(',')\n    };\n    return this.client.get({\n      url: 'collections/',\n      serviceName: 'api',\n      qs: params,\n      signature: this.client.getCollectionsToken()\n    }, callback);\n  },\n  deleteMany: function deleteMany(collection, ids, callback) {\n    /**\n     * Remove all objects by id from the collection.\n     *\n     * @method delete\n     * @memberof Collections.prototype\n     * @param {object|array} ids - A single json object or an array of objects\n     * @param {requestCallback} callback - Callback to call on completion\n     * @return {Promise} Promise object.\n     */\n    if (!this.client.usingApiSecret) {\n      throw new errors.SiteError('This method can only be used server-side using your API Secret');\n    }\n\n    var last = arguments[arguments.length - 1]; // callback is always the last argument\n\n    callback = last.call ? last : undefined;\n\n    if (!Array.isArray(ids)) {\n      ids = [ids];\n    }\n\n    ids = ids.map(function (id) {\n      return id.toString();\n    }).join(',');\n    var params = {\n      collection_name: collection,\n      ids: ids\n    };\n    return this.client.delete({\n      url: 'collections/',\n      serviceName: 'api',\n      qs: params,\n      signature: this.client.getCollectionsToken()\n    }, callback);\n  }\n};\n\nvar CollectionEntry = function CollectionEntry() {\n  this.initialize.apply(this, arguments);\n};\n\nCollectionEntry.prototype = {\n  initialize: function initialize(store, collection, id, data) {\n    this.collection = collection;\n    this.store = store;\n    this.id = id;\n    this.data = data;\n  },\n  _streamRef: function _streamRef() {\n    return \"SO:\".concat(this.collection, \":\").concat(this.id);\n  },\n  get: function get(callback) {\n    var _this = this;\n    /**\n     * get item from collection and sync data\n     * @method get\n     * @memberof CollectionEntry.prototype\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example collection.get(\"0c7db91c-67f9-11e8-bcd9-fe00a9219401\")\n     */\n\n\n    return this.store.get(this.collection, this.id).then(function (response) {\n      _this.data = response.data;\n      _this.full = response;\n\n      if (callback) {\n        callback(response);\n      }\n\n      return response;\n    });\n  },\n  add: function add(callback) {\n    var _this2 = this;\n    /**\n     * Add item to collection\n     * @method add\n     * @memberof CollectionEntry.prototype\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example collection.add(\"cheese101\", {\"name\": \"cheese burger\",\"toppings\": \"cheese\"})\n     */\n\n\n    return this.store.add(this.collection, this.id, this.data).then(function (response) {\n      _this2.data = response.data;\n      _this2.full = response;\n\n      if (callback) {\n        callback(response);\n      }\n\n      return response;\n    });\n  },\n  update: function update(callback) {\n    var _this3 = this;\n    /**\n     * Update item in the object storage\n     * @method update\n     * @memberof CollectionEntry.prototype\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example store.update(\"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", {\"name\": \"cheese burger\",\"toppings\": \"cheese\"})\n     * @example store.update(\"cheese101\", {\"name\": \"cheese burger\",\"toppings\": \"cheese\"})\n     */\n\n\n    return this.store.update(this.collection, this.id, this.data).then(function (response) {\n      _this3.data = response.data;\n      _this3.full = response;\n\n      if (callback) {\n        callback(response);\n      }\n\n      return response;\n    });\n  },\n  delete: function _delete(callback) {\n    var _this4 = this;\n    /**\n     * Delete item from collection\n     * @method delete\n     * @memberof CollectionEntry.prototype\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example collection.delete(\"cheese101\")\n     */\n\n\n    return this.store.delete(this.collection, this.id).then(function (response) {\n      _this4.data = null;\n      _this4.full = null;\n\n      if (callback) {\n        callback(response);\n      }\n\n      return response;\n    });\n  }\n};\nmodule.exports = Collections;","map":{"version":3,"sources":["/Users/batson24/Desktop/Date_Site/frontend/node_modules/getstream/lib/lib/collections.js"],"names":["errors","require","Collections","initialize","apply","arguments","prototype","client","token","buildURL","collection","itemId","url","undefined","entry","itemData","CollectionEntry","get","callback","self","signature","then","response","collections","id","data","full","add","body","post","update","entryId","put","delete","_delete","upsert","usingApiSecret","SiteError","last","length","call","Array","isArray","data_json","serviceName","getCollectionsToken","select","ids","params","foreign_ids","map","join","qs","deleteMany","toString","collection_name","store","_streamRef","concat","_this","_this2","_this3","_this4","module","exports"],"mappings":"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","sourcesContent":["var errors = require('./errors');\n\nvar Collections = function Collections() {\n  this.initialize.apply(this, arguments);\n};\n\nCollections.prototype = {\n  initialize: function initialize(client, token) {\n    /**\n     * Initialize a feed object\n     * @method intialize\n     * @memberof Collections.prototype\n     * @param {StreamCloudClient} client Stream client this collection is constructed from\n     * @param {string} token JWT token\n     */\n    this.client = client;\n    this.token = token;\n  },\n  buildURL: function buildURL(collection, itemId) {\n    var url = 'collections/' + collection + '/';\n\n    if (itemId === undefined) {\n      return url;\n    }\n\n    return url + itemId + '/';\n  },\n  entry: function entry(collection, itemId, itemData) {\n    return new CollectionEntry(this, collection, itemId, itemData);\n  },\n  get: function get(collection, itemId, callback) {\n    /**\n     * get item from collection\n     * @method get\n     * @memberof Collections.prototype\n     * @param  {string}   collection  collection name\n     * @param  {object}   itemId  id for this entry\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example collection.get(\"food\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\")\n     */\n    var self = this;\n    return this.client.get({\n      url: this.buildURL(collection, itemId),\n      signature: this.token\n    }).then(function (response) {\n      var entry = self.client.collections.entry(response.collection, response.id, response.data);\n      entry.full = response;\n\n      if (callback) {\n        callback(entry);\n      }\n\n      return entry;\n    });\n  },\n  add: function add(collection, itemId, itemData, callback) {\n    /**\n     * Add item to collection\n     * @method add\n     * @memberof Collections.prototype\n     * @param  {string}   collection  collection name\n     * @param  {string}   itemId  entry id\n     * @param  {object}   itemData  ObjectStore data\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example collection.add(\"food\", \"cheese101\", {\"name\": \"cheese burger\",\"toppings\": \"cheese\"})\n     */\n    var self = this;\n\n    if (itemId === null) {\n      itemId = undefined;\n    }\n\n    var body = {\n      id: itemId,\n      data: itemData\n    };\n    return this.client.post({\n      url: this.buildURL(collection),\n      body: body,\n      signature: this.token\n    }).then(function (response) {\n      var entry = self.client.collections.entry(response.collection, response.id, response.data);\n      entry.full = response;\n\n      if (callback) {\n        callback(entry);\n      }\n\n      return entry;\n    });\n  },\n  update: function update(collection, entryId, data, callback) {\n    /**\n     * Update entry in the collection\n     * @method update\n     * @memberof Collections.prototype\n     * @param  {string}   collection  collection name\n     * @param  {object}   entryId  Collection object id\n     * @param  {object}   data  ObjectStore data\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example store.update(\"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", {\"name\": \"cheese burger\",\"toppings\": \"cheese\"})\n     * @example store.update(\"food\", \"cheese101\", {\"name\": \"cheese burger\",\"toppings\": \"cheese\"})\n     */\n    var self = this;\n    var body = {\n      data: data\n    };\n    return this.client.put({\n      url: this.buildURL(collection, entryId),\n      body: body,\n      signature: this.token\n    }).then(function (response) {\n      var entry = self.client.collections.entry(response.collection, response.id, response.data);\n      entry.full = response;\n\n      if (callback) {\n        callback(entry);\n      }\n\n      return entry;\n    });\n  },\n  delete: function _delete(collection, entryId, callback) {\n    /**\n     * Delete entry from collection\n     * @method delete\n     * @memberof Collections.prototype\n     * @param  {object}   entryId  Collection entry id\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example collection.delete(\"food\", \"cheese101\")\n     */\n    return this.client['delete']({\n      url: this.buildURL(collection, entryId),\n      signature: this.token\n    }, callback);\n  },\n  upsert: function upsert(collection, data, callback) {\n    /**\n     * Upsert one or more items within a collection.\n     *\n     * @method upsert\n     * @memberof Collections.prototype\n     * @param {object|array} data - A single json object or an array of objects\n     * @param {requestCallback} callback - Callback to call on completion\n     * @return {Promise} Promise object.\n     */\n    if (!this.client.usingApiSecret) {\n      throw new errors.SiteError('This method can only be used server-side using your API Secret');\n    }\n\n    var last = arguments[arguments.length - 1]; // callback is always the last argument\n\n    callback = last.call ? last : undefined;\n\n    if (!Array.isArray(data)) {\n      data = [data];\n    }\n\n    var data_json = {\n      data: {}\n    };\n    data_json['data'][collection] = data;\n    return this.client.post({\n      url: 'collections/',\n      serviceName: 'api',\n      body: data_json,\n      signature: this.client.getCollectionsToken()\n    }, callback);\n  },\n  select: function select(collection, ids, callback) {\n    /**\n     * Select all objects with ids from the collection.\n     *\n     * @method select\n     * @memberof Collections.prototype\n     * @param {object|array} ids - A single json object or an array of objects\n     * @param {requestCallback} callback - Callback to call on completion\n     * @return {Promise} Promise object.\n     */\n    if (!this.client.usingApiSecret) {\n      throw new errors.SiteError('This method can only be used server-side using your API Secret');\n    }\n\n    var last = arguments[arguments.length - 1]; // callback is always the last argument\n\n    callback = last.call ? last : undefined;\n\n    if (!Array.isArray(ids)) {\n      ids = [ids];\n    }\n\n    var params = {\n      foreign_ids: ids.map(function (id) {\n        return collection + ':' + id;\n      }).join(',')\n    };\n    return this.client.get({\n      url: 'collections/',\n      serviceName: 'api',\n      qs: params,\n      signature: this.client.getCollectionsToken()\n    }, callback);\n  },\n  deleteMany: function deleteMany(collection, ids, callback) {\n    /**\n     * Remove all objects by id from the collection.\n     *\n     * @method delete\n     * @memberof Collections.prototype\n     * @param {object|array} ids - A single json object or an array of objects\n     * @param {requestCallback} callback - Callback to call on completion\n     * @return {Promise} Promise object.\n     */\n    if (!this.client.usingApiSecret) {\n      throw new errors.SiteError('This method can only be used server-side using your API Secret');\n    }\n\n    var last = arguments[arguments.length - 1]; // callback is always the last argument\n\n    callback = last.call ? last : undefined;\n\n    if (!Array.isArray(ids)) {\n      ids = [ids];\n    }\n\n    ids = ids.map(function (id) {\n      return id.toString();\n    }).join(',');\n    var params = {\n      collection_name: collection,\n      ids: ids\n    };\n    return this.client.delete({\n      url: 'collections/',\n      serviceName: 'api',\n      qs: params,\n      signature: this.client.getCollectionsToken()\n    }, callback);\n  }\n};\n\nvar CollectionEntry = function CollectionEntry() {\n  this.initialize.apply(this, arguments);\n};\n\nCollectionEntry.prototype = {\n  initialize: function initialize(store, collection, id, data) {\n    this.collection = collection;\n    this.store = store;\n    this.id = id;\n    this.data = data;\n  },\n  _streamRef: function _streamRef() {\n    return \"SO:\".concat(this.collection, \":\").concat(this.id);\n  },\n  get: function get(callback) {\n    var _this = this;\n\n    /**\n     * get item from collection and sync data\n     * @method get\n     * @memberof CollectionEntry.prototype\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example collection.get(\"0c7db91c-67f9-11e8-bcd9-fe00a9219401\")\n     */\n    return this.store.get(this.collection, this.id).then(function (response) {\n      _this.data = response.data;\n      _this.full = response;\n\n      if (callback) {\n        callback(response);\n      }\n\n      return response;\n    });\n  },\n  add: function add(callback) {\n    var _this2 = this;\n\n    /**\n     * Add item to collection\n     * @method add\n     * @memberof CollectionEntry.prototype\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example collection.add(\"cheese101\", {\"name\": \"cheese burger\",\"toppings\": \"cheese\"})\n     */\n    return this.store.add(this.collection, this.id, this.data).then(function (response) {\n      _this2.data = response.data;\n      _this2.full = response;\n\n      if (callback) {\n        callback(response);\n      }\n\n      return response;\n    });\n  },\n  update: function update(callback) {\n    var _this3 = this;\n\n    /**\n     * Update item in the object storage\n     * @method update\n     * @memberof CollectionEntry.prototype\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example store.update(\"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", {\"name\": \"cheese burger\",\"toppings\": \"cheese\"})\n     * @example store.update(\"cheese101\", {\"name\": \"cheese burger\",\"toppings\": \"cheese\"})\n     */\n    return this.store.update(this.collection, this.id, this.data).then(function (response) {\n      _this3.data = response.data;\n      _this3.full = response;\n\n      if (callback) {\n        callback(response);\n      }\n\n      return response;\n    });\n  },\n  delete: function _delete(callback) {\n    var _this4 = this;\n\n    /**\n     * Delete item from collection\n     * @method delete\n     * @memberof CollectionEntry.prototype\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example collection.delete(\"cheese101\")\n     */\n    return this.store.delete(this.collection, this.id).then(function (response) {\n      _this4.data = null;\n      _this4.full = null;\n\n      if (callback) {\n        callback(response);\n      }\n\n      return response;\n    });\n  }\n};\nmodule.exports = Collections;"]},"metadata":{},"sourceType":"script"}