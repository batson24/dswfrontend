{"ast":null,"code":"const create = async (params, credentials, post) => {\n  try {\n    let response = await fetch('/api/posts/new/' + params.userId, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: post\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst listByUser = async (params, credentials) => {\n  try {\n    let response = await fetch('/api/posts/by/' + params.userId, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      }\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst listNewsFeed = async (params, credentials, signal) => {\n  try {\n    let response = await fetch('/api/posts/feed/' + params.userId, {\n      method: 'GET',\n      signal: signal,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      }\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst remove = async (params, credentials) => {\n  try {\n    let response = await fetch('/api/posts/' + params.postId, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      }\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst like = async (params, credentials, postId) => {\n  try {\n    let response = await fetch('/api/posts/like/', {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: JSON.stringify({\n        userId: params.userId,\n        postId: postId\n      })\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst unlike = async (params, credentials, postId) => {\n  try {\n    let response = await fetch('/api/posts/unlike/', {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: JSON.stringify({\n        userId: params.userId,\n        postId: postId\n      })\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst comment = async (params, credentials, postId, comment) => {\n  try {\n    let response = await fetch('/api/posts/comment/', {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: JSON.stringify({\n        userId: params.userId,\n        postId: postId,\n        comment: comment\n      })\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst uncomment = async (params, credentials, postId, comment) => {\n  try {\n    let response = await fetch('/api/posts/uncomment/', {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: JSON.stringify({\n        userId: params.userId,\n        postId: postId,\n        comment: comment\n      })\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport { listNewsFeed, listByUser, create, remove, like, unlike, comment, uncomment };","map":{"version":3,"sources":["/Users/batson24/Desktop/Date_Site/frontend/src/Components/api-post.jsx"],"names":["create","params","credentials","post","response","fetch","userId","method","headers","t","body","json","err","console","log","listByUser","listNewsFeed","signal","remove","postId","like","JSON","stringify","unlike","comment","uncomment"],"mappings":"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","sourcesContent":["const create = async (params, credentials, post) => {\n    try {\n      let response = await fetch('/api/posts/new/'+ params.userId, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Authorization': 'Bearer ' + credentials.t\n        },\n        body: post\n      })\n      return await response.json()\n    } catch(err) {\n      console.log(err)\n    }\n  }\n  \n  const listByUser = async (params, credentials) => {\n    try {\n      let response = await fetch('/api/posts/by/'+ params.userId, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + credentials.t\n        }\n      })\n      return await response.json()\n    } catch(err) {\n      console.log(err)\n    }\n  }\n  \n  const listNewsFeed = async (params, credentials, signal) => {\n    try {\n      let response = await fetch('/api/posts/feed/'+ params.userId, {\n        method: 'GET',\n        signal: signal,\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + credentials.t\n        }\n      })    \n      return await response.json()\n    } catch(err) {\n      console.log(err)\n    }\n  }\n  \n  const remove = async (params, credentials) => {\n    try {\n      let response = await fetch('/api/posts/' + params.postId, {\n        method: 'DELETE',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + credentials.t\n        }\n      })\n      return await response.json()\n    } catch(err) {\n      console.log(err)\n    }\n  }\n  \n  \n  const like = async (params, credentials, postId) => {\n    try {\n      let response = await fetch('/api/posts/like/', {\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + credentials.t\n        },\n        body: JSON.stringify({userId:params.userId, postId: postId})\n      })\n      return await response.json()\n    } catch(err) {\n      console.log(err)\n    }\n  }\n  \n  \n  const unlike = async (params, credentials, postId) => {\n    try {\n      let response = await fetch('/api/posts/unlike/', {\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + credentials.t\n        },\n        body: JSON.stringify({userId:params.userId, postId: postId})\n      })\n      return await response.json()\n    } catch(err) {\n      console.log(err)\n    }\n  }\n  \n  \n  const comment = async (params, credentials, postId, comment) => {\n    try {\n      let response = await fetch('/api/posts/comment/', {\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + credentials.t\n        },\n        body: JSON.stringify({userId:params.userId, postId: postId, comment: comment})\n      })\n      return await response.json()\n    } catch(err) {\n      console.log(err)\n    }\n  }\n  \n  \n  const uncomment = async (params, credentials, postId, comment) => {\n    try {\n      let response = await fetch('/api/posts/uncomment/', {\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + credentials.t\n        },\n        body: JSON.stringify({userId:params.userId, postId: postId, comment: comment})\n      })\n      return await response.json()\n    } catch(err) {\n      console.log(err)\n    }\n  }\n  \n  \n  export {\n    listNewsFeed,\n    listByUser,\n    create,\n    remove,\n    like,\n    unlike,\n    comment,\n    uncomment\n  }"]},"metadata":{},"sourceType":"module"}