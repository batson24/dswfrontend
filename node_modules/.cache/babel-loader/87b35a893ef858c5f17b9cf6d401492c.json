{"ast":null,"code":"var _jsxFileName = \"/Users/batson24/Desktop/Date_Site/frontend/src/Components/Comments.jsx\";\nimport React, { useState } from 'react';\nimport auth from '../Components/authenticator';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport TextField from '@material-ui/core/TextField';\nimport Avatar from '@material-ui/core/Avatar';\nimport Icon from '@material-ui/core/Icon';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { comment, uncomment } from './Components/api-post.jsx';\nimport { Link } from 'react-router-dom';\nconst useStyles = makeStyles(theme => ({\n  cardHeader: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1)\n  },\n  smallAvatar: {\n    width: 25,\n    height: 25\n  },\n  commentField: {\n    width: '96%'\n  },\n  commentText: {\n    backgroundColor: 'white',\n    padding: theme.spacing(1),\n    margin: `2px ${theme.spacing(2)}px 2px 2px`\n  },\n  commentDate: {\n    display: 'block',\n    color: 'gray',\n    fontSize: '0.8em'\n  },\n  commentDelete: {\n    fontSize: '1.6em',\n    verticalAlign: 'middle',\n    cursor: 'pointer'\n  }\n}));\nexport default function Comments(props) {\n  const classes = useStyles();\n  const [text, setText] = useState('');\n  const jwt = auth.isAuthenticated();\n\n  const handleChange = event => {\n    setText(event.target.value);\n  };\n\n  const addComment = event => {\n    if (event.keyCode == 13 && event.target.value) {\n      event.preventDefault();\n      comment({\n        userId: jwt.user._id\n      }, {\n        t: jwt.token\n      }, props.postId, {\n        text: text\n      }).then(data => {\n        if (data.error) {\n          console.log(data.error);\n        } else {\n          setText('');\n          props.updateComments(data.comments);\n        }\n      });\n    }\n  };\n\n  const deleteComment = comment => event => {\n    uncomment({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, props.postId, comment).then(data => {\n      if (data.error) {\n        console.log(data.error);\n      } else {\n        props.updateComments(data.comments);\n      }\n    });\n  };\n\n  const commentBody = item => {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      className: classes.commentText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/user/\" + item.postedBy._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, item.postedBy.name), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 78\n      }\n    }), item.text, /*#__PURE__*/React.createElement(\"span\", {\n      className: classes.commentDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }, new Date(item.created).toDateString(), \" |\", auth.isAuthenticated().user._id === item.postedBy._id && /*#__PURE__*/React.createElement(Icon, {\n      onClick: deleteComment(item),\n      className: classes.commentDelete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }, \"delete\")));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    avatar: /*#__PURE__*/React.createElement(Avatar, {\n      className: classes.smallAvatar,\n      src: '/api/users/photo/' + auth.isAuthenticated().user._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }),\n    title: /*#__PURE__*/React.createElement(TextField, {\n      onKeyDown: addComment,\n      multiline: true,\n      value: text,\n      onChange: handleChange,\n      placeholder: \"Write something ...\",\n      className: classes.commentField,\n      margin: \"normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 23\n      }\n    }),\n    className: classes.cardHeader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }), props.comments.map((item, i) => {\n    return /*#__PURE__*/React.createElement(CardHeader, {\n      avatar: /*#__PURE__*/React.createElement(Avatar, {\n        className: classes.smallAvatar,\n        src: '/api/users/photo/' + item.postedBy._id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }\n      }),\n      title: commentBody(item),\n      className: classes.cardHeader,\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 20\n      }\n    });\n  }));\n}\nComments.propTypes = {\n  postId: PropTypes.string.isRequired,\n  comments: PropTypes.array.isRequired,\n  updateComments: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/Users/batson24/Desktop/Date_Site/frontend/src/Components/Comments.jsx"],"names":["React","useState","auth","CardHeader","TextField","Avatar","Icon","PropTypes","makeStyles","comment","uncomment","Link","useStyles","theme","cardHeader","paddingTop","spacing","paddingBottom","smallAvatar","width","height","commentField","commentText","backgroundColor","padding","margin","commentDate","display","color","fontSize","commentDelete","verticalAlign","cursor","Comments","props","classes","text","setText","jwt","isAuthenticated","handleChange","event","target","value","addComment","keyCode","preventDefault","userId","user","_id","t","token","postId","then","data","error","console","log","updateComments","comments","deleteComment","commentBody","item","postedBy","name","Date","created","toDateString","map","i","propTypes","string","isRequired","array","func"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport auth from '../Components/authenticator'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport TextField from '@material-ui/core/TextField'\nimport Avatar from '@material-ui/core/Avatar'\nimport Icon from '@material-ui/core/Icon'\nimport PropTypes from 'prop-types'\nimport {makeStyles} from '@material-ui/core/styles'\nimport {comment, uncomment} from './Components/api-post.jsx'\nimport {Link} from 'react-router-dom'\n\nconst useStyles = makeStyles(theme => ({\n  cardHeader: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1)\n  },\n  smallAvatar: {\n    width: 25,\n    height: 25\n  },\n  commentField: {\n    width: '96%'\n  },\n  commentText: {\n    backgroundColor: 'white',\n    padding: theme.spacing(1),\n    margin: `2px ${theme.spacing(2)}px 2px 2px`\n  },\n  commentDate: {\n    display: 'block',\n    color: 'gray',\n    fontSize: '0.8em'\n },\n commentDelete: {\n   fontSize: '1.6em',\n   verticalAlign: 'middle',\n   cursor: 'pointer'\n }\n}))\n\nexport default function Comments (props) {\n  const classes = useStyles()\n  const [text, setText] = useState('')\n  const jwt = auth.isAuthenticated()\n  const handleChange = event => {\n    setText(event.target.value)\n  }\n  const addComment = (event) => {\n    if(event.keyCode == 13 && event.target.value){\n      event.preventDefault()\n      comment({\n        userId: jwt.user._id\n      }, {\n        t: jwt.token\n      }, props.postId, {text: text}).then((data) => {\n        if (data.error) {\n          console.log(data.error)\n        } else {\n          setText('')\n          props.updateComments(data.comments)\n        }\n      })\n    }\n  }\n\n  const deleteComment = comment => event => {\n    uncomment({\n      userId: jwt.user._id\n    }, {\n      t: jwt.token\n    }, props.postId, comment).then((data) => {\n      if (data.error) {\n        console.log(data.error)\n      } else {\n        props.updateComments(data.comments)\n      }\n    })\n  }\n\n    const commentBody = item => {\n      return (\n        <p className={classes.commentText}>\n          <Link to={\"/user/\" + item.postedBy._id}>{item.postedBy.name}</Link><br/>\n          {item.text}\n          <span className={classes.commentDate}>\n            {(new Date(item.created)).toDateString()} |\n            {auth.isAuthenticated().user._id === item.postedBy._id &&\n              <Icon onClick={deleteComment(item)} className={classes.commentDelete}>delete</Icon> }\n          </span>\n        </p>\n      )\n    }\n\n    return (<div>\n        <CardHeader\n              avatar={\n                <Avatar className={classes.smallAvatar} src={'/api/users/photo/'+auth.isAuthenticated().user._id}/>\n              }\n              title={ <TextField\n                onKeyDown={addComment}\n                multiline\n                value={text}\n                onChange={handleChange}\n                placeholder=\"Write something ...\"\n                className={classes.commentField}\n                margin=\"normal\"\n                />}\n              className={classes.cardHeader}\n        />\n        { props.comments.map((item, i) => {\n            return <CardHeader\n                      avatar={\n                        <Avatar className={classes.smallAvatar} src={'/api/users/photo/'+item.postedBy._id}/>\n                      }\n                      title={commentBody(item)}\n                      className={classes.cardHeader}\n                      key={i}/>\n              })\n        }\n    </div>)\n}\n\nComments.propTypes = {\n  postId: PropTypes.string.isRequired,\n  comments: PropTypes.array.isRequired,\n  updateComments: PropTypes.func.isRequired\n}"]},"metadata":{},"sourceType":"module"}