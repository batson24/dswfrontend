{"ast":null,"code":"const create = async user => {\n  try {\n    let response = await fetch('/api/users/', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst list = async signal => {\n  try {\n    let response = await fetch('/api/users/', {\n      method: 'GET',\n      signal: signal\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst read = async (params, credentials, signal) => {\n  try {\n    let response = await fetch('/api/users/' + params.userId, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      }\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst update = async (params, credentials, user) => {\n  try {\n    let response = await fetch('/api/users/' + params.userId, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: user\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst remove = async (params, credentials) => {\n  try {\n    let response = await fetch('/api/users/' + params.userId, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      }\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst follow = async (params, credentials, followId) => {\n  try {\n    let response = await fetch('/api/users/follow/', {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: JSON.stringify({\n        userId: params.userId,\n        followId: followId\n      })\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst unfollow = async (params, credentials, unfollowId) => {\n  try {\n    let response = await fetch('/api/users/unfollow/', {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      },\n      body: JSON.stringify({\n        userId: params.userId,\n        unfollowId: unfollowId\n      })\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst findPeople = async (params, credentials, signal) => {\n  try {\n    let response = await fetch('/api/users/findpeople/' + params.userId, {\n      method: 'GET',\n      signal: signal,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + credentials.t\n      }\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport { create, list, read, update, remove, follow, unfollow, findPeople };","map":{"version":3,"sources":["/Users/batson24/Desktop/Date_Site/frontend/src/Components/api-user.jsx"],"names":["create","user","response","fetch","method","headers","body","JSON","stringify","json","err","console","log","list","signal","read","params","credentials","userId","t","update","remove","follow","followId","unfollow","unfollowId","findPeople"],"mappings":"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","sourcesContent":["const create = async (user) => {\n    try {\n      let response = await fetch('/api/users/', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(user)\n      })\n      return await response.json()\n    } catch(err) {\n      console.log(err)\n    }\n  }\n  \n  const list = async (signal) => {\n    try {\n      let response = await fetch('/api/users/', {\n        method: 'GET',\n        signal: signal\n      })\n      return await response.json()\n    } catch(err) {\n      console.log(err)\n    }\n  }\n  \n  const read = async (params, credentials, signal) => {\n    try {\n      let response = await fetch('/api/users/' + params.userId, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + credentials.t\n        }\n    })\n      return await response.json()\n    } catch(err) {\n      console.log(err)\n    }\n  }\n  \n  const update = async (params, credentials, user) => {\n    try {\n      let response = await fetch('/api/users/' + params.userId, {\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json',\n          'Authorization': 'Bearer ' + credentials.t\n        },\n        body: user\n      })\n      return await response.json()\n    } catch(err) {\n      console.log(err)\n    }\n  }\n  \n  const remove = async (params, credentials) => {\n    try {\n      let response = await fetch('/api/users/' + params.userId, {\n        method: 'DELETE',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + credentials.t\n        }\n      })\n      return await response.json()\n    } catch(err) {\n      console.log(err)\n    }\n  }\n  \n  const follow = async (params, credentials, followId) => {\n    try {\n      let response = await fetch('/api/users/follow/', {\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + credentials.t\n        },\n        body: JSON.stringify({userId:params.userId, followId: followId})\n      })\n      return await response.json()\n    } catch(err) {\n      console.log(err)\n    }\n  }\n  \n  const unfollow = async (params, credentials, unfollowId) => {\n    try {\n      let response = await fetch('/api/users/unfollow/', {\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + credentials.t\n        },\n        body: JSON.stringify({userId:params.userId, unfollowId: unfollowId})\n      })\n      return await response.json()\n    } catch(err) {\n      console.log(err)\n    }\n  }\n  \n  const findPeople = async (params, credentials, signal) => {\n    try {\n      let response = await fetch('/api/users/findpeople/' + params.userId, {\n        method: 'GET',\n        signal: signal,\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + credentials.t\n        }\n      })    \n      return await response.json()\n    } catch(err) {\n      console.log(err)\n    }\n  }\n  \n  export {\n    create,\n    list,\n    read,\n    update,\n    remove,\n    follow,\n    unfollow,\n    findPeople\n  }"]},"metadata":{},"sourceType":"module"}