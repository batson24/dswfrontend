{"ast":null,"code":"var _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar fetch = require('@stream-io/cross-fetch');\n\nvar Headers = require('@stream-io/cross-fetch').Headers;\n\nvar FormData = require('form-data');\n\nvar utils = require('./utils');\n\nvar errors = require('./errors');\n\nvar StreamImageStore = function StreamImageStore() {\n  this.initialize.apply(this, arguments);\n};\n\nStreamImageStore.prototype = {\n  initialize: function initialize(client, token) {\n    this.client = client;\n    this.token = token;\n  },\n  // React Native does not auto-detect MIME type, you need to pass that via contentType\n  // param. If you don't then Android will refuse to perform the upload\n  upload: function upload(uri, name, contentType) {\n    var data = new FormData();\n    var fileField;\n\n    if (utils.isReadableStream(uri)) {\n      fileField = uri;\n    } else {\n      fileField = {\n        uri: uri,\n        name: name || uri.split('/').reverse()[0]\n      };\n\n      if (contentType != null) {\n        fileField.type = contentType;\n      }\n    }\n\n    data.append('file', fileField);\n    return fetch(\"\".concat(this.client.enrichUrl('images/'), \"?api_key=\").concat(this.client.apiKey), {\n      method: 'post',\n      body: data,\n      headers: new Headers({\n        Authorization: this.token\n      })\n    }).then(function (r) {\n      if (r.ok) {\n        return r.json();\n      } // error\n\n\n      return r.text().then(function (responseData) {\n        r.statusCode = r.status;\n\n        try {\n          responseData = JSON.parse(responseData);\n        } catch (e) {// ignore json parsing errors\n        }\n\n        throw new errors.StreamApiError(JSON.stringify(responseData) + ' with HTTP status code ' + r.status, responseData, r);\n      });\n    });\n  },\n  delete: function _delete(uri) {\n    return this.client.delete({\n      url: \"images/\",\n      qs: {\n        url: uri\n      },\n      signature: this.token\n    });\n  },\n  process: function process(uri, options) {\n    var params = _extends(options, {\n      url: uri\n    });\n\n    if (Array.isArray(params.crop)) {\n      params.crop = params.crop.join(',');\n    }\n\n    return this.client.get({\n      url: \"images/\",\n      qs: params,\n      signature: this.token\n    });\n  },\n  thumbmail: function thumbmail(uri, w, h) {\n    var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      crop: 'center',\n      resize: 'clip'\n    },\n        crop = _ref.crop,\n        resize = _ref.resize;\n\n    return this.process(uri, {\n      w: w,\n      h: h,\n      crop: crop,\n      resize: resize\n    });\n  }\n};\nmodule.exports = StreamImageStore;","map":{"version":3,"sources":["/Users/batson24/Desktop/Date_Site/frontend/node_modules/getstream/lib/lib/images.js"],"names":["_extends","require","fetch","Headers","FormData","utils","errors","StreamImageStore","initialize","apply","arguments","prototype","client","token","upload","uri","name","contentType","data","fileField","isReadableStream","split","reverse","type","append","concat","enrichUrl","apiKey","method","body","headers","Authorization","then","r","ok","json","text","responseData","statusCode","status","JSON","parse","e","StreamApiError","stringify","delete","_delete","url","qs","signature","process","options","params","Array","isArray","crop","join","get","thumbmail","w","h","_ref","length","undefined","resize","module","exports"],"mappings":"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","sourcesContent":["var _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar fetch = require('@stream-io/cross-fetch');\n\nvar Headers = require('@stream-io/cross-fetch').Headers;\n\nvar FormData = require('form-data');\n\nvar utils = require('./utils');\n\nvar errors = require('./errors');\n\nvar StreamImageStore = function StreamImageStore() {\n  this.initialize.apply(this, arguments);\n};\n\nStreamImageStore.prototype = {\n  initialize: function initialize(client, token) {\n    this.client = client;\n    this.token = token;\n  },\n  // React Native does not auto-detect MIME type, you need to pass that via contentType\n  // param. If you don't then Android will refuse to perform the upload\n  upload: function upload(uri, name, contentType) {\n    var data = new FormData();\n    var fileField;\n\n    if (utils.isReadableStream(uri)) {\n      fileField = uri;\n    } else {\n      fileField = {\n        uri: uri,\n        name: name || uri.split('/').reverse()[0]\n      };\n\n      if (contentType != null) {\n        fileField.type = contentType;\n      }\n    }\n\n    data.append('file', fileField);\n    return fetch(\"\".concat(this.client.enrichUrl('images/'), \"?api_key=\").concat(this.client.apiKey), {\n      method: 'post',\n      body: data,\n      headers: new Headers({\n        Authorization: this.token\n      })\n    }).then(function (r) {\n      if (r.ok) {\n        return r.json();\n      } // error\n\n\n      return r.text().then(function (responseData) {\n        r.statusCode = r.status;\n\n        try {\n          responseData = JSON.parse(responseData);\n        } catch (e) {// ignore json parsing errors\n        }\n\n        throw new errors.StreamApiError(JSON.stringify(responseData) + ' with HTTP status code ' + r.status, responseData, r);\n      });\n    });\n  },\n  delete: function _delete(uri) {\n    return this.client.delete({\n      url: \"images/\",\n      qs: {\n        url: uri\n      },\n      signature: this.token\n    });\n  },\n  process: function process(uri, options) {\n    var params = _extends(options, {\n      url: uri\n    });\n\n    if (Array.isArray(params.crop)) {\n      params.crop = params.crop.join(',');\n    }\n\n    return this.client.get({\n      url: \"images/\",\n      qs: params,\n      signature: this.token\n    });\n  },\n  thumbmail: function thumbmail(uri, w, h) {\n    var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      crop: 'center',\n      resize: 'clip'\n    },\n        crop = _ref.crop,\n        resize = _ref.resize;\n\n    return this.process(uri, {\n      w: w,\n      h: h,\n      crop: crop,\n      resize: resize\n    });\n  }\n};\nmodule.exports = StreamImageStore;"]},"metadata":{},"sourceType":"script"}