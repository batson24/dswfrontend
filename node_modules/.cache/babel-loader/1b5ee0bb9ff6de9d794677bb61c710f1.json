{"ast":null,"code":"var fetch = require('@stream-io/cross-fetch');\n\nvar Headers = require('@stream-io/cross-fetch').Headers;\n\nvar utils = require('./utils');\n\nvar FormData = require('form-data');\n\nvar errors = require('./errors');\n\nvar StreamFileStore = function StreamFileStore() {\n  this.initialize.apply(this, arguments);\n};\n\nStreamFileStore.prototype = {\n  initialize: function initialize(client, token) {\n    this.client = client;\n    this.token = token;\n  },\n  // React Native does not auto-detect MIME type, you need to pass that via contentType\n  // param. If you don't then Android will refuse to perform the upload\n  upload: function upload(uri, name, contentType) {\n    var data = new FormData();\n    var fileField;\n\n    if (utils.isReadableStream(uri)) {\n      fileField = uri;\n    } else {\n      fileField = {\n        uri: uri,\n        name: name || uri.split('/').reverse()[0]\n      };\n\n      if (contentType != null) {\n        fileField.type = contentType;\n      }\n    }\n\n    data.append('file', fileField);\n    return fetch(\"\".concat(this.client.enrichUrl('files/'), \"?api_key=\").concat(this.client.apiKey), {\n      method: 'post',\n      body: data,\n      headers: new Headers({\n        Authorization: this.token\n      })\n    }).then(function (r) {\n      if (r.ok) {\n        return r.json();\n      } // error\n\n\n      return r.text().then(function (responseData) {\n        r.statusCode = r.status;\n\n        try {\n          responseData = JSON.parse(responseData);\n        } catch (e) {// ignore json parsing errors\n        }\n\n        throw new errors.StreamApiError(JSON.stringify(responseData) + ' with HTTP status code ' + r.status, responseData, r);\n      });\n    });\n  },\n  delete: function _delete(uri) {\n    return this.client.delete({\n      url: \"files/\",\n      qs: {\n        url: uri\n      },\n      signature: this.token\n    });\n  }\n};\nmodule.exports = StreamFileStore;","map":{"version":3,"sources":["/Users/batson24/Desktop/Date_Site/frontend/node_modules/getstream/lib/lib/files.js"],"names":["fetch","require","Headers","utils","FormData","errors","StreamFileStore","initialize","apply","arguments","prototype","client","token","upload","uri","name","contentType","data","fileField","isReadableStream","split","reverse","type","append","concat","enrichUrl","apiKey","method","body","headers","Authorization","then","r","ok","json","text","responseData","statusCode","status","JSON","parse","e","StreamApiError","stringify","delete","_delete","url","qs","signature","module","exports"],"mappings":"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","sourcesContent":["var fetch = require('@stream-io/cross-fetch');\n\nvar Headers = require('@stream-io/cross-fetch').Headers;\n\nvar utils = require('./utils');\n\nvar FormData = require('form-data');\n\nvar errors = require('./errors');\n\nvar StreamFileStore = function StreamFileStore() {\n  this.initialize.apply(this, arguments);\n};\n\nStreamFileStore.prototype = {\n  initialize: function initialize(client, token) {\n    this.client = client;\n    this.token = token;\n  },\n  // React Native does not auto-detect MIME type, you need to pass that via contentType\n  // param. If you don't then Android will refuse to perform the upload\n  upload: function upload(uri, name, contentType) {\n    var data = new FormData();\n    var fileField;\n\n    if (utils.isReadableStream(uri)) {\n      fileField = uri;\n    } else {\n      fileField = {\n        uri: uri,\n        name: name || uri.split('/').reverse()[0]\n      };\n\n      if (contentType != null) {\n        fileField.type = contentType;\n      }\n    }\n\n    data.append('file', fileField);\n    return fetch(\"\".concat(this.client.enrichUrl('files/'), \"?api_key=\").concat(this.client.apiKey), {\n      method: 'post',\n      body: data,\n      headers: new Headers({\n        Authorization: this.token\n      })\n    }).then(function (r) {\n      if (r.ok) {\n        return r.json();\n      } // error\n\n\n      return r.text().then(function (responseData) {\n        r.statusCode = r.status;\n\n        try {\n          responseData = JSON.parse(responseData);\n        } catch (e) {// ignore json parsing errors\n        }\n\n        throw new errors.StreamApiError(JSON.stringify(responseData) + ' with HTTP status code ' + r.status, responseData, r);\n      });\n    });\n  },\n  delete: function _delete(uri) {\n    return this.client.delete({\n      url: \"files/\",\n      qs: {\n        url: uri\n      },\n      signature: this.token\n    });\n  }\n};\nmodule.exports = StreamFileStore;"]},"metadata":{},"sourceType":"script"}