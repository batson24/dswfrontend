{"ast":null,"code":"/**\n * @module stream\n * @author Thierry Schellenbach\n * BSD License\n */\nvar StreamClient = require('./lib/client');\n\nvar errors = require('./lib/errors');\n\nvar signing = require('./lib/signing');\n\nvar request = require('request');\n\nfunction connect(apiKey, apiSecret, appId, options) {\n  /**\n   * Create StreamClient\n   * @method connect\n   * @param  {string} apiKey    API key\n   * @param  {string} [apiSecret] API secret (only use this on the server)\n   * @param  {string} [appId]     Application identifier\n   * @param  {object} [options]   Additional options\n   * @param  {string} [options.location] Datacenter location\n   * @return {StreamClient}     StreamClient\n   * @example <caption>Basic usage</caption>\n   * stream.connect(apiKey, apiSecret);\n   * @example <caption>or if you want to be able to subscribe and listen</caption>\n   * stream.connect(apiKey, apiSecret, appId);\n   * @example <caption>or on Heroku</caption>\n   * stream.connect(streamURL);\n   * @example <caption>where streamURL looks like</caption>\n   * \"https://thierry:pass@gestream.io/?app=1\"\n   */\n  if (typeof process !== 'undefined' && process.env.STREAM_URL && !apiKey) {\n    var parts = /https:\\/\\/(\\w+):(\\w+)@([\\w-]*).*\\?app_id=(\\d+)/.exec(process.env.STREAM_URL);\n    apiKey = parts[1];\n    apiSecret = parts[2];\n    var location = parts[3];\n    appId = parts[4];\n\n    if (options === undefined) {\n      options = {};\n    }\n\n    if (location !== 'getstream' && location !== 'stream-io-api') {\n      options.location = location;\n    }\n  }\n\n  return new StreamClient(apiKey, apiSecret, appId, options);\n}\n\nmodule.exports.connect = connect;\nmodule.exports.errors = errors;\nmodule.exports.request = request;\nmodule.exports.signing = signing;\nmodule.exports.Client = StreamClient;","map":{"version":3,"sources":["/Users/batson24/Desktop/Date_Site/frontend/node_modules/getstream/lib/getstream.js"],"names":["StreamClient","require","errors","signing","request","connect","apiKey","apiSecret","appId","options","process","env","STREAM_URL","parts","exec","location","undefined","module","exports","Client"],"mappings":"AAAA;;;;;AAKA,IAAIA,YAAY,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,cAAD,CAApB;;AAEA,IAAIE,OAAO,GAAGF,OAAO,CAAC,eAAD,CAArB;;AAEA,IAAIG,OAAO,GAAGH,OAAO,CAAC,SAAD,CAArB;;AAEA,SAASI,OAAT,CAAiBC,MAAjB,EAAyBC,SAAzB,EAAoCC,KAApC,EAA2CC,OAA3C,EAAoD;AAClD;;;;;;;;;;;;;;;;;;AAkBA,MAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkCA,OAAO,CAACC,GAAR,CAAYC,UAA9C,IAA4D,CAACN,MAAjE,EAAyE;AACvE,QAAIO,KAAK,GAAG,iDAAiDC,IAAjD,CAAsDJ,OAAO,CAACC,GAAR,CAAYC,UAAlE,CAAZ;AACAN,IAAAA,MAAM,GAAGO,KAAK,CAAC,CAAD,CAAd;AACAN,IAAAA,SAAS,GAAGM,KAAK,CAAC,CAAD,CAAjB;AACA,QAAIE,QAAQ,GAAGF,KAAK,CAAC,CAAD,CAApB;AACAL,IAAAA,KAAK,GAAGK,KAAK,CAAC,CAAD,CAAb;;AAEA,QAAIJ,OAAO,KAAKO,SAAhB,EAA2B;AACzBP,MAAAA,OAAO,GAAG,EAAV;AACD;;AAED,QAAIM,QAAQ,KAAK,WAAb,IAA4BA,QAAQ,KAAK,eAA7C,EAA8D;AAC5DN,MAAAA,OAAO,CAACM,QAAR,GAAmBA,QAAnB;AACD;AACF;;AAED,SAAO,IAAIf,YAAJ,CAAiBM,MAAjB,EAAyBC,SAAzB,EAAoCC,KAApC,EAA2CC,OAA3C,CAAP;AACD;;AAEDQ,MAAM,CAACC,OAAP,CAAeb,OAAf,GAAyBA,OAAzB;AACAY,MAAM,CAACC,OAAP,CAAehB,MAAf,GAAwBA,MAAxB;AACAe,MAAM,CAACC,OAAP,CAAed,OAAf,GAAyBA,OAAzB;AACAa,MAAM,CAACC,OAAP,CAAef,OAAf,GAAyBA,OAAzB;AACAc,MAAM,CAACC,OAAP,CAAeC,MAAf,GAAwBnB,YAAxB","sourcesContent":["/**\n * @module stream\n * @author Thierry Schellenbach\n * BSD License\n */\nvar StreamClient = require('./lib/client');\n\nvar errors = require('./lib/errors');\n\nvar signing = require('./lib/signing');\n\nvar request = require('request');\n\nfunction connect(apiKey, apiSecret, appId, options) {\n  /**\n   * Create StreamClient\n   * @method connect\n   * @param  {string} apiKey    API key\n   * @param  {string} [apiSecret] API secret (only use this on the server)\n   * @param  {string} [appId]     Application identifier\n   * @param  {object} [options]   Additional options\n   * @param  {string} [options.location] Datacenter location\n   * @return {StreamClient}     StreamClient\n   * @example <caption>Basic usage</caption>\n   * stream.connect(apiKey, apiSecret);\n   * @example <caption>or if you want to be able to subscribe and listen</caption>\n   * stream.connect(apiKey, apiSecret, appId);\n   * @example <caption>or on Heroku</caption>\n   * stream.connect(streamURL);\n   * @example <caption>where streamURL looks like</caption>\n   * \"https://thierry:pass@gestream.io/?app=1\"\n   */\n  if (typeof process !== 'undefined' && process.env.STREAM_URL && !apiKey) {\n    var parts = /https:\\/\\/(\\w+):(\\w+)@([\\w-]*).*\\?app_id=(\\d+)/.exec(process.env.STREAM_URL);\n    apiKey = parts[1];\n    apiSecret = parts[2];\n    var location = parts[3];\n    appId = parts[4];\n\n    if (options === undefined) {\n      options = {};\n    }\n\n    if (location !== 'getstream' && location !== 'stream-io-api') {\n      options.location = location;\n    }\n  }\n\n  return new StreamClient(apiKey, apiSecret, appId, options);\n}\n\nmodule.exports.connect = connect;\nmodule.exports.errors = errors;\nmodule.exports.request = request;\nmodule.exports.signing = signing;\nmodule.exports.Client = StreamClient;"]},"metadata":{},"sourceType":"script"}