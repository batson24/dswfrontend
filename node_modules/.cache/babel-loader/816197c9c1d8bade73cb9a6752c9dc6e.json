{"ast":null,"code":"var _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar errors = require('./errors');\n\nvar StreamReaction = function StreamReaction() {\n  this.initialize.apply(this, arguments);\n};\n\nStreamReaction.prototype = {\n  initialize: function initialize(client, token) {\n    /**\n     * Initialize a feed object\n     * @method intialize\n     * @memberof StreamReaction.prototype\n     * @param {StreamClient} client Stream client this feed is constructed from\n     * @param {string} token JWT token\n     * @example new StreamReaction(client, \"eyJhbGciOiJIUzI1...\")\n     */\n    this.client = client;\n    this.token = token;\n    this.signature = token;\n  },\n  buildURL: function buildURL() {\n    var url = 'reaction/';\n\n    for (var i = 0; i < arguments.length; i++) {\n      url += arguments[i] + '/';\n    }\n\n    return url;\n  },\n  all: function all(options, callback) {\n    /**\n     * get all reactions\n     * @method all\n     * @memberof StreamReaction.prototype\n     * @param  {object}   options  {limit:}\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.all()\n     * @example reactions.all({limit:100})\n     */\n    return this.client.get({\n      url: this.buildURL(),\n      signature: this.signature\n    }, callback);\n  },\n  _convertTargetFeeds: function _convertTargetFeeds() {\n    var targetFeeds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return targetFeeds.map(function (elem) {\n      return typeof elem === 'string' ? elem : elem.id;\n    });\n  },\n  add: function add(kind, activity) {\n    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n        id = _ref.id,\n        _ref$targetFeeds = _ref.targetFeeds,\n        targetFeeds = _ref$targetFeeds === void 0 ? [] : _ref$targetFeeds,\n        userId = _ref.userId,\n        targetFeedsExtraData = _ref.targetFeedsExtraData;\n\n    var callback = arguments.length > 4 ? arguments[4] : undefined;\n    /**\n     * add reaction\n     * @method add\n     * @memberof StreamReaction.prototype\n     * @param  {string}   kind  kind of reaction\n     * @param  {string}   activity Activity or an ActivityID\n     * @param  {object}   data  data related to reaction\n     * @param  {array}    targetFeeds  an array of feeds to which to send an activity with the reaction\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.add(\"like\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\")\n     * @example reactions.add(\"comment\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", {\"text\": \"love it!\"},)\n     */\n\n    if (activity instanceof Object) {\n      activity = activity.id;\n    }\n\n    targetFeeds = this._convertTargetFeeds(targetFeeds);\n    var body = {\n      id: id,\n      activity_id: activity,\n      kind: kind,\n      data: data,\n      target_feeds: targetFeeds,\n      user_id: userId\n    };\n\n    if (targetFeedsExtraData != null) {\n      body.target_feeds_extra_data = targetFeedsExtraData;\n    }\n\n    return this.client.post({\n      url: this.buildURL(),\n      body: body,\n      signature: this.signature\n    }, callback);\n  },\n  addChild: function addChild(kind, reaction) {\n    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n        _ref2$targetFeeds = _ref2.targetFeeds,\n        targetFeeds = _ref2$targetFeeds === void 0 ? [] : _ref2$targetFeeds,\n        userId = _ref2.userId,\n        targetFeedsExtraData = _ref2.targetFeedsExtraData;\n\n    var callback = arguments.length > 4 ? arguments[4] : undefined;\n    /**\n     * add reaction\n     * @method add\n     * @memberof StreamReaction.prototype\n     * @param  {string}   kind  kind of reaction\n     * @param  {string}   reaction Reaction or a ReactionID\n     * @param  {object}   data  data related to reaction\n     * @param  {array}    targetFeeds  an array of feeds to which to send an activity with the reaction\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.add(\"like\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\")\n     * @example reactions.add(\"comment\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", {\"text\": \"love it!\"},)\n     */\n\n    if (reaction instanceof Object) {\n      reaction = reaction.id;\n    }\n\n    targetFeeds = this._convertTargetFeeds(targetFeeds);\n    var body = {\n      parent: reaction,\n      kind: kind,\n      data: data,\n      target_feeds: targetFeeds,\n      user_id: userId\n    };\n\n    if (targetFeedsExtraData != null) {\n      body.target_feeds_extra_data = targetFeedsExtraData;\n    }\n\n    return this.client.post({\n      url: this.buildURL(),\n      body: body,\n      signature: this.signature\n    }, callback);\n  },\n  get: function get(id, callback) {\n    /**\n     * get reaction\n     * @method add\n     * @memberof StreamReaction.prototype\n     * @param  {string}   id Reaction Id\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.get(\"67b3e3b5-b201-4697-96ac-482eb14f88ec\")\n     */\n    return this.client.get({\n      url: this.buildURL(id),\n      signature: this.signature\n    }, callback);\n  },\n  filter: function filter(conditions, callback) {\n    /**\n     * retrieve reactions by activity_id, user_id or reaction_id (to paginate children reactions), pagination can be done using id_lt, id_lte, id_gt and id_gte parameters\n     * id_lt and id_lte return reactions order by creation descending starting from the reaction with the ID provided, when id_lte is used\n     * the reaction with ID equal to the value provided is included.\n     * id_gt and id_gte return reactions order by creation ascending (oldest to newest) starting from the reaction with the ID provided, when id_gte is used\n     * the reaction with ID equal to the value provided is included.\n     * results are limited to 25 at most and are ordered newest to oldest by default.\n     * @method lookup\n     * @memberof StreamReaction.prototype\n     * @param  {object}   conditions Reaction Id {activity_id|user_id|foreign_id:string, kind:string, next:string, previous:string, limit:integer}\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.lookup({activity_id: \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", kind:\"like\"})\n     * @example reactions.lookup({user_id: \"john\", kinds:\"like\"})\n     */\n    var user_id = conditions.user_id,\n        activity_id = conditions.activity_id,\n        reaction_id = conditions.reaction_id,\n        qs = _objectWithoutProperties(conditions, [\"user_id\", \"activity_id\", \"reaction_id\"]);\n\n    if (!qs.limit) {\n      qs.limit = 10;\n    }\n\n    if ((user_id ? 1 : 0) + (activity_id ? 1 : 0) + (reaction_id ? 1 : 0) != 1) {\n      throw new errors.SiteError('Must provide exactly one value for one of these params: user_id, activity_id, reaction_id');\n    }\n\n    var lookupType = user_id && 'user_id' || activity_id && 'activity_id' || reaction_id && 'reaction_id';\n    var value = user_id || activity_id || reaction_id;\n    var url = this.buildURL(lookupType, value);\n\n    if (conditions.kind) {\n      url = this.buildURL(lookupType, value, conditions.kind);\n    }\n\n    return this.client.get({\n      url: url,\n      qs: qs,\n      signature: this.signature\n    }, callback);\n  },\n  update: function update(id, data) {\n    var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref3$targetFeeds = _ref3.targetFeeds,\n        targetFeeds = _ref3$targetFeeds === void 0 ? [] : _ref3$targetFeeds,\n        targetFeedsExtraData = _ref3.targetFeedsExtraData;\n\n    var callback = arguments.length > 3 ? arguments[3] : undefined;\n    /**\n     * update reaction\n     * @method add\n     * @memberof StreamReaction.prototype\n     * @param  {string}   id Reaction Id\n     * @param  {object}   data  Data associated to reaction\n     * @param  {array}   targetFeeds  Optional feeds to post the activity to. If you sent this before and don't set it here it will be removed.\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.update(\"67b3e3b5-b201-4697-96ac-482eb14f88ec\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", \"like\")\n     * @example reactions.update(\"67b3e3b5-b201-4697-96ac-482eb14f88ec\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", \"comment\", {\"text\": \"love it!\"},)\n     */\n\n    targetFeeds = this._convertTargetFeeds(targetFeeds);\n    var body = {\n      data: data,\n      target_feeds: targetFeeds\n    };\n\n    if (targetFeedsExtraData != null) {\n      body.target_feeds_extra_data = targetFeedsExtraData;\n    }\n\n    return this.client.put({\n      url: this.buildURL(id),\n      body: body,\n      signature: this.signature\n    }, callback);\n  },\n  delete: function _delete(id, callback) {\n    /**\n     * delete reaction\n     * @method delete\n     * @memberof StreamReaction.prototype\n     * @param  {string}   id Reaction Id\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.delete(\"67b3e3b5-b201-4697-96ac-482eb14f88ec\")\n     */\n    return this.client.delete({\n      url: this.buildURL(id),\n      signature: this.signature\n    }, callback);\n  }\n};\nmodule.exports = StreamReaction;","map":{"version":3,"sources":["/Users/batson24/Desktop/Date_Site/frontend/node_modules/getstream/lib/lib/reaction.js"],"names":["_objectWithoutProperties","require","errors","StreamReaction","initialize","apply","arguments","prototype","client","token","signature","buildURL","url","i","length","all","options","callback","get","_convertTargetFeeds","targetFeeds","undefined","map","elem","id","add","kind","activity","data","_ref","_ref$targetFeeds","userId","targetFeedsExtraData","Object","body","activity_id","target_feeds","user_id","target_feeds_extra_data","post","addChild","reaction","_ref2","_ref2$targetFeeds","parent","filter","conditions","reaction_id","qs","limit","SiteError","lookupType","value","update","_ref3","_ref3$targetFeeds","put","delete","_delete","module","exports"],"mappings":"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","sourcesContent":["var _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar errors = require('./errors');\n\nvar StreamReaction = function StreamReaction() {\n  this.initialize.apply(this, arguments);\n};\n\nStreamReaction.prototype = {\n  initialize: function initialize(client, token) {\n    /**\n     * Initialize a feed object\n     * @method intialize\n     * @memberof StreamReaction.prototype\n     * @param {StreamClient} client Stream client this feed is constructed from\n     * @param {string} token JWT token\n     * @example new StreamReaction(client, \"eyJhbGciOiJIUzI1...\")\n     */\n    this.client = client;\n    this.token = token;\n    this.signature = token;\n  },\n  buildURL: function buildURL() {\n    var url = 'reaction/';\n\n    for (var i = 0; i < arguments.length; i++) {\n      url += arguments[i] + '/';\n    }\n\n    return url;\n  },\n  all: function all(options, callback) {\n    /**\n     * get all reactions\n     * @method all\n     * @memberof StreamReaction.prototype\n     * @param  {object}   options  {limit:}\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.all()\n     * @example reactions.all({limit:100})\n     */\n    return this.client.get({\n      url: this.buildURL(),\n      signature: this.signature\n    }, callback);\n  },\n  _convertTargetFeeds: function _convertTargetFeeds() {\n    var targetFeeds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return targetFeeds.map(function (elem) {\n      return typeof elem === 'string' ? elem : elem.id;\n    });\n  },\n  add: function add(kind, activity) {\n    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n        id = _ref.id,\n        _ref$targetFeeds = _ref.targetFeeds,\n        targetFeeds = _ref$targetFeeds === void 0 ? [] : _ref$targetFeeds,\n        userId = _ref.userId,\n        targetFeedsExtraData = _ref.targetFeedsExtraData;\n\n    var callback = arguments.length > 4 ? arguments[4] : undefined;\n\n    /**\n     * add reaction\n     * @method add\n     * @memberof StreamReaction.prototype\n     * @param  {string}   kind  kind of reaction\n     * @param  {string}   activity Activity or an ActivityID\n     * @param  {object}   data  data related to reaction\n     * @param  {array}    targetFeeds  an array of feeds to which to send an activity with the reaction\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.add(\"like\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\")\n     * @example reactions.add(\"comment\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", {\"text\": \"love it!\"},)\n     */\n    if (activity instanceof Object) {\n      activity = activity.id;\n    }\n\n    targetFeeds = this._convertTargetFeeds(targetFeeds);\n    var body = {\n      id: id,\n      activity_id: activity,\n      kind: kind,\n      data: data,\n      target_feeds: targetFeeds,\n      user_id: userId\n    };\n\n    if (targetFeedsExtraData != null) {\n      body.target_feeds_extra_data = targetFeedsExtraData;\n    }\n\n    return this.client.post({\n      url: this.buildURL(),\n      body: body,\n      signature: this.signature\n    }, callback);\n  },\n  addChild: function addChild(kind, reaction) {\n    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n        _ref2$targetFeeds = _ref2.targetFeeds,\n        targetFeeds = _ref2$targetFeeds === void 0 ? [] : _ref2$targetFeeds,\n        userId = _ref2.userId,\n        targetFeedsExtraData = _ref2.targetFeedsExtraData;\n\n    var callback = arguments.length > 4 ? arguments[4] : undefined;\n\n    /**\n     * add reaction\n     * @method add\n     * @memberof StreamReaction.prototype\n     * @param  {string}   kind  kind of reaction\n     * @param  {string}   reaction Reaction or a ReactionID\n     * @param  {object}   data  data related to reaction\n     * @param  {array}    targetFeeds  an array of feeds to which to send an activity with the reaction\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.add(\"like\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\")\n     * @example reactions.add(\"comment\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", {\"text\": \"love it!\"},)\n     */\n    if (reaction instanceof Object) {\n      reaction = reaction.id;\n    }\n\n    targetFeeds = this._convertTargetFeeds(targetFeeds);\n    var body = {\n      parent: reaction,\n      kind: kind,\n      data: data,\n      target_feeds: targetFeeds,\n      user_id: userId\n    };\n\n    if (targetFeedsExtraData != null) {\n      body.target_feeds_extra_data = targetFeedsExtraData;\n    }\n\n    return this.client.post({\n      url: this.buildURL(),\n      body: body,\n      signature: this.signature\n    }, callback);\n  },\n  get: function get(id, callback) {\n    /**\n     * get reaction\n     * @method add\n     * @memberof StreamReaction.prototype\n     * @param  {string}   id Reaction Id\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.get(\"67b3e3b5-b201-4697-96ac-482eb14f88ec\")\n     */\n    return this.client.get({\n      url: this.buildURL(id),\n      signature: this.signature\n    }, callback);\n  },\n  filter: function filter(conditions, callback) {\n    /**\n     * retrieve reactions by activity_id, user_id or reaction_id (to paginate children reactions), pagination can be done using id_lt, id_lte, id_gt and id_gte parameters\n     * id_lt and id_lte return reactions order by creation descending starting from the reaction with the ID provided, when id_lte is used\n     * the reaction with ID equal to the value provided is included.\n     * id_gt and id_gte return reactions order by creation ascending (oldest to newest) starting from the reaction with the ID provided, when id_gte is used\n     * the reaction with ID equal to the value provided is included.\n     * results are limited to 25 at most and are ordered newest to oldest by default.\n     * @method lookup\n     * @memberof StreamReaction.prototype\n     * @param  {object}   conditions Reaction Id {activity_id|user_id|foreign_id:string, kind:string, next:string, previous:string, limit:integer}\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.lookup({activity_id: \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", kind:\"like\"})\n     * @example reactions.lookup({user_id: \"john\", kinds:\"like\"})\n     */\n    var user_id = conditions.user_id,\n        activity_id = conditions.activity_id,\n        reaction_id = conditions.reaction_id,\n        qs = _objectWithoutProperties(conditions, [\"user_id\", \"activity_id\", \"reaction_id\"]);\n\n    if (!qs.limit) {\n      qs.limit = 10;\n    }\n\n    if ((user_id ? 1 : 0) + (activity_id ? 1 : 0) + (reaction_id ? 1 : 0) != 1) {\n      throw new errors.SiteError('Must provide exactly one value for one of these params: user_id, activity_id, reaction_id');\n    }\n\n    var lookupType = user_id && 'user_id' || activity_id && 'activity_id' || reaction_id && 'reaction_id';\n    var value = user_id || activity_id || reaction_id;\n    var url = this.buildURL(lookupType, value);\n\n    if (conditions.kind) {\n      url = this.buildURL(lookupType, value, conditions.kind);\n    }\n\n    return this.client.get({\n      url: url,\n      qs: qs,\n      signature: this.signature\n    }, callback);\n  },\n  update: function update(id, data) {\n    var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref3$targetFeeds = _ref3.targetFeeds,\n        targetFeeds = _ref3$targetFeeds === void 0 ? [] : _ref3$targetFeeds,\n        targetFeedsExtraData = _ref3.targetFeedsExtraData;\n\n    var callback = arguments.length > 3 ? arguments[3] : undefined;\n\n    /**\n     * update reaction\n     * @method add\n     * @memberof StreamReaction.prototype\n     * @param  {string}   id Reaction Id\n     * @param  {object}   data  Data associated to reaction\n     * @param  {array}   targetFeeds  Optional feeds to post the activity to. If you sent this before and don't set it here it will be removed.\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.update(\"67b3e3b5-b201-4697-96ac-482eb14f88ec\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", \"like\")\n     * @example reactions.update(\"67b3e3b5-b201-4697-96ac-482eb14f88ec\", \"0c7db91c-67f9-11e8-bcd9-fe00a9219401\", \"comment\", {\"text\": \"love it!\"},)\n     */\n    targetFeeds = this._convertTargetFeeds(targetFeeds);\n    var body = {\n      data: data,\n      target_feeds: targetFeeds\n    };\n\n    if (targetFeedsExtraData != null) {\n      body.target_feeds_extra_data = targetFeedsExtraData;\n    }\n\n    return this.client.put({\n      url: this.buildURL(id),\n      body: body,\n      signature: this.signature\n    }, callback);\n  },\n  delete: function _delete(id, callback) {\n    /**\n     * delete reaction\n     * @method delete\n     * @memberof StreamReaction.prototype\n     * @param  {string}   id Reaction Id\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example reactions.delete(\"67b3e3b5-b201-4697-96ac-482eb14f88ec\")\n     */\n    return this.client.delete({\n      url: this.buildURL(id),\n      signature: this.signature\n    }, callback);\n  }\n};\nmodule.exports = StreamReaction;"]},"metadata":{},"sourceType":"script"}