{"ast":null,"code":"// import React, {useRef, useEffect} from 'react'\n// import io from 'socket.io-client'\n// let Room = (props)=>{\n//     let userVideo=useRef()\n//     let partnerVideo = useRef()\n//     let peerRef = useRef()\n//     let socketRef= useRef()\n//     let otherUser= useRef()\n//     let userStream= useRef()\n//     useEffect(() =>{\n//         navigator.mediaDevices.getUserMedia({audio:true, video:true}).then(stream=>{\n//             userVideo.current.srcObject=stream\n//             userStream.current=stream\n//             socketRef.current = io.connect('/')\n//             socketRef.current.emit('join room', props.match.params.roomID)\n//             socketRef.current.on('other user', userID=>{\n//                 callUser.current=userID;\n//                 otherUser.current=userID\n//             })\n//         socketRef.current.on('user joined', userID=>{\n//             otherUser.current=userID;\n//         })\n//         socketRef.current.on('offer',handleRecieveCall)\n//         socketRef.current.on('answer', handleAnswer)\n//         socketRef.current.on('ice-candidate', handleNewICECandidateMsg)\n//     })\n//     },[])\n//     function callUser(userID){\n//         peerRef.current=createPeer(userID)\n//         userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track,userStream.current))\n//     }\n//     function createPeer(userID){\n//         let peer= new RTCPeerConnection({\n//             iceServers:[\n//                 {\n//                     urls:'stun:stun.stunprotocol.org'\n//                 },\n//                 {\n//                     urls: 'trun:numb.viagenie.ca',\n//                     credential: 'muazkh',\n//                     username: 'webrtc@live.com'\n//                 }\n//             ]\n//         })\n//         peer.onicecandidate= handleICECandidateEvent\n//         peer.ontrack=handleTrackEvent\n//         peer.onnegotiationneeded= ()=> handleNegotiationNeededEvent(userID)\n//         return peer\n//     }\n//     function handleNegotiationNeededEvent(userID){\n//         peerRef.current.createOffer().then(offer=>{\n//             return peerRef.current.setLocalDescription(offer)\n//         }).then(()=>{\n//                 let payload={\n//                     target:userID,\n//                     caller: socketRef.current.id,\n//                     sdp:peerRef.current.localDecscription\n//                 }\n//                 socketRef.current.emit('offer', payload)\n//             }).catch(e=> console.log(e))\n//         }\n//         function handleRecieveCall(incoming){\n//             peerRef.current = createPeer()\n//             let desc = new RTCSessionDescription(incoming.sdp)\n//             peerRef.current.setRemoteDescription(desc).then(()=>{\n//                 userStream.current.getTracks().forEach(track=> peerRef.current.addTrack(track, userStream.current))\n//             }).then(() =>{\n//                 return peerRef.current.createAnswer()\n//             }).then(answer=>{\n//                 return peerRef.current.setLocalDescription(answer)\n//             }).then(()=>{\n//                 let payload={\n//                     target: incoming.caller,\n//                     caller: socketRef.current.id,\n//                     sdp:peerRef.current.localDescription\n//                 }\n//                 socketRef.current.emit('answer', payload)\n//             })\n//         }\n//         function handleAnswer(message){\n//             let desc= new RTCSessionDescription(message.sdp)\n//             peerRef.current.setRemoteDescription(desc).catch(e=>console.log(e))\n//         }\n//         function handleICECandidateEvent(e){\n//             if(e.candidate){\n//                 let payload={\n//                     target: otherUser.current,\n//                     candidate: e.candidate,\n//                 }\n//                 socketRef.current.emit('ice-candidate',payload)\n//             }\n//         }\n//         function handleNewICECandidateMsg(incoming){\n//             let candidate=new RTCIceCandidate(incoming)\n//             peerRef.current.addIceCandidate(candidate)\n//             .catch(e=> console.log(e))\n//         }\n//        function handleTrackEvent(e){\n//            partnerVideo.current.srcObject=e.streams[0]\n//        }\n//     return(\n//         <div>\n//             <video autoPlay ref={userVideo}/>\n//             <video autoPlay ref={partnerVideo}/>\n//         </div>\n//     )\n// }\n// export default Room","map":{"version":3,"sources":["/Users/batson24/Desktop/Date_Site/frontend/src/Routes/Room.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["// import React, {useRef, useEffect} from 'react'\n// import io from 'socket.io-client'\n\n// let Room = (props)=>{\n//     let userVideo=useRef()\n//     let partnerVideo = useRef()\n//     let peerRef = useRef()\n//     let socketRef= useRef()\n//     let otherUser= useRef()\n//     let userStream= useRef()\n\n//     useEffect(() =>{\n//         navigator.mediaDevices.getUserMedia({audio:true, video:true}).then(stream=>{\n//             userVideo.current.srcObject=stream\n//             userStream.current=stream\n\n//             socketRef.current = io.connect('/')\n//             socketRef.current.emit('join room', props.match.params.roomID)\n//             socketRef.current.on('other user', userID=>{\n//                 callUser.current=userID;\n//                 otherUser.current=userID\n//             })\n        \n//         socketRef.current.on('user joined', userID=>{\n//             otherUser.current=userID;\n//         })\n//         socketRef.current.on('offer',handleRecieveCall)\n//         socketRef.current.on('answer', handleAnswer)\n//         socketRef.current.on('ice-candidate', handleNewICECandidateMsg)\n//     })\n//     },[])\n\n//     function callUser(userID){\n//         peerRef.current=createPeer(userID)\n//         userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track,userStream.current))\n//     }\n\n//     function createPeer(userID){\n//         let peer= new RTCPeerConnection({\n//             iceServers:[\n//                 {\n//                     urls:'stun:stun.stunprotocol.org'\n//                 },\n//                 {\n//                     urls: 'trun:numb.viagenie.ca',\n//                     credential: 'muazkh',\n//                     username: 'webrtc@live.com'\n//                 }\n//             ]\n//         })\n//         peer.onicecandidate= handleICECandidateEvent\n//         peer.ontrack=handleTrackEvent\n//         peer.onnegotiationneeded= ()=> handleNegotiationNeededEvent(userID)\n//         return peer\n//     }\n//     function handleNegotiationNeededEvent(userID){\n//         peerRef.current.createOffer().then(offer=>{\n//             return peerRef.current.setLocalDescription(offer)\n//         }).then(()=>{\n//                 let payload={\n//                     target:userID,\n//                     caller: socketRef.current.id,\n//                     sdp:peerRef.current.localDecscription\n//                 }\n//                 socketRef.current.emit('offer', payload)\n//             }).catch(e=> console.log(e))\n//         }\n//         function handleRecieveCall(incoming){\n//             peerRef.current = createPeer()\n//             let desc = new RTCSessionDescription(incoming.sdp)\n//             peerRef.current.setRemoteDescription(desc).then(()=>{\n//                 userStream.current.getTracks().forEach(track=> peerRef.current.addTrack(track, userStream.current))\n//             }).then(() =>{\n//                 return peerRef.current.createAnswer()\n//             }).then(answer=>{\n//                 return peerRef.current.setLocalDescription(answer)\n//             }).then(()=>{\n//                 let payload={\n//                     target: incoming.caller,\n//                     caller: socketRef.current.id,\n//                     sdp:peerRef.current.localDescription\n//                 }\n//                 socketRef.current.emit('answer', payload)\n            \n//             })\n            \n            \n//         }\n//         function handleAnswer(message){\n//             let desc= new RTCSessionDescription(message.sdp)\n//             peerRef.current.setRemoteDescription(desc).catch(e=>console.log(e))\n//         }\n\n//         function handleICECandidateEvent(e){\n//             if(e.candidate){\n//                 let payload={\n//                     target: otherUser.current,\n//                     candidate: e.candidate,\n//                 }\n//                 socketRef.current.emit('ice-candidate',payload)\n//             }\n//         }\n\n//         function handleNewICECandidateMsg(incoming){\n//             let candidate=new RTCIceCandidate(incoming)\n//             peerRef.current.addIceCandidate(candidate)\n//             .catch(e=> console.log(e))\n//         }\n            \n//        function handleTrackEvent(e){\n//            partnerVideo.current.srcObject=e.streams[0]\n//        }\n    \n\n//     return(\n//         <div>\n//             <video autoPlay ref={userVideo}/>\n//             <video autoPlay ref={partnerVideo}/>\n//         </div>\n\n//     )\n// }\n\n// export default Room"]},"metadata":{},"sourceType":"module"}