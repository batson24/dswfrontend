{"ast":null,"code":"var _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nvar errors = require('./errors');\n\nvar utils = require('./utils');\n\nvar isObject = require('lodash/isObject');\n\nvar isPlainObject = require('lodash/isPlainObject');\n\nvar StreamUser = require('./user');\n\nvar signing = require('./signing');\n\nvar StreamFeed = function StreamFeed() {\n  /**\n   * Manage api calls for specific feeds\n   * The feed object contains convenience functions such add activity, remove activity etc\n   * @class StreamFeed\n   */\n  this.initialize.apply(this, arguments);\n};\n\nfunction replaceStreamObjects(obj) {\n  var cloned = obj;\n\n  if (Array.isArray(obj)) {\n    cloned = obj.map(function (v) {\n      return replaceStreamObjects(v);\n    });\n  } else if (isPlainObject(obj)) {\n    cloned = {};\n\n    for (var k in obj) {\n      cloned[k] = replaceStreamObjects(obj[k]);\n    }\n  } else if (isObject(obj) && obj._streamRef !== undefined) {\n    cloned = obj._streamRef();\n  }\n\n  return cloned;\n}\n\nStreamFeed.prototype = {\n  initialize: function initialize(client, feedSlug, userId, token) {\n    /**\n     * Initialize a feed object\n     * @method intialize\n     * @memberof StreamFeed.prototype\n     * @param {StreamClient} client - The stream client this feed is constructed from\n     * @param {string} feedSlug - The feed slug\n     * @param {string} userId - The user id\n     * @param {string} [token] - The authentication token\n     */\n    if (!feedSlug || !userId) {\n      throw new errors.FeedError('Please provide a feed slug and user id, ie client.feed(\"user\", \"1\")');\n    }\n\n    if (feedSlug.indexOf(':') !== -1) {\n      throw new errors.FeedError('Please initialize the feed using client.feed(\"user\", \"1\") not client.feed(\"user:1\")');\n    }\n\n    utils.validateFeedSlug(feedSlug);\n    utils.validateUserId(userId); // raise an error if there is no token\n\n    if (!this.apiSecret && !token) {\n      throw new errors.FeedError('Missing token, in client side mode please provide a feed secret');\n    }\n\n    this.client = client;\n    this.slug = feedSlug;\n    this.userId = userId;\n    this.id = this.slug + ':' + this.userId;\n    this.token = token;\n    this.feedUrl = this.id.replace(':', '/');\n    this.feedTogether = this.id.replace(':', '');\n    this.signature = this.feedTogether + ' ' + this.token; // faye setup\n\n    this.notificationChannel = 'site-' + this.client.appId + '-feed-' + this.feedTogether;\n    this.enrichByDefault = false;\n  },\n  addActivity: function addActivity(activity, callback) {\n    /**\n     * Adds the given activity to the feed and\n     * calls the specified callback\n     * @method addActivity\n     * @memberof StreamFeed.prototype\n     * @param {object} activity - The activity to add\n     * @param {requestCallback} callback - Callback to call on completion\n     * @return {Promise} Promise object\n     */\n    activity = replaceStreamObjects(activity);\n\n    if (!activity.actor && this.client.currentUser) {\n      activity.actor = this.client.currentUser._streamRef();\n    }\n\n    return this.client.post({\n      url: 'feed/' + this.feedUrl + '/',\n      body: activity,\n      signature: this.signature\n    }, callback);\n  },\n  removeActivity: function removeActivity(activityId, callback) {\n    /**\n     * Removes the activity by activityId\n     * @method removeActivity\n     * @memberof StreamFeed.prototype\n     * @param  {string}   activityId Identifier of activity to remove\n     * @param  {requestCallback} callback   Callback to call on completion\n     * @return {Promise} Promise object\n     * @example\n     * feed.removeActivity(activityId);\n     * @example\n     * feed.removeActivity({'foreignId': foreignId});\n     */\n    var identifier = activityId.foreignId ? activityId.foreignId : activityId;\n    var params = {};\n\n    if (activityId.foreignId) {\n      params['foreign_id'] = '1';\n    }\n\n    return this.client['delete']({\n      url: 'feed/' + this.feedUrl + '/' + identifier + '/',\n      qs: params,\n      signature: this.signature\n    }, callback);\n  },\n  addActivities: function addActivities(activities, callback) {\n    /**\n     * Adds the given activities to the feed and calls the specified callback\n     * @method addActivities\n     * @memberof StreamFeed.prototype\n     * @param  {Array}   activities Array of activities to add\n     * @param  {requestCallback} callback   Callback to call on completion\n     * @return {Promise}               XHR request object\n     */\n    activities = replaceStreamObjects(activities);\n    var data = {\n      activities: activities\n    };\n    var xhr = this.client.post({\n      url: 'feed/' + this.feedUrl + '/',\n      body: data,\n      signature: this.signature\n    }, callback);\n    return xhr;\n  },\n  follow: function follow(targetSlug, targetUserId, options, callback) {\n    /**\n     * Follows the given target feed\n     * @method follow\n     * @memberof StreamFeed.prototype\n     * @param  {string}   targetSlug   Slug of the target feed\n     * @param  {string}   targetUserId User identifier of the target feed\n     * @param  {object}   options      Additional options\n     * @param  {number}   options.activityCopyLimit Limit the amount of activities copied over on follow\n     * @param  {requestCallback} callback     Callback to call on completion\n     * @return {Promise}  Promise object\n     * @example feed.follow('user', '1');\n     * @example feed.follow('user', '1', callback);\n     * @example feed.follow('user', '1', options, callback);\n     */\n    if (targetUserId instanceof StreamUser) {\n      targetUserId = targetUserId.id;\n    }\n\n    utils.validateFeedSlug(targetSlug);\n    utils.validateUserId(targetUserId);\n    var activityCopyLimit;\n    var last = arguments[arguments.length - 1]; // callback is always the last argument\n\n    callback = last.call ? last : undefined;\n    var target = targetSlug + ':' + targetUserId; // check for additional options\n\n    if (options && !options.call) {\n      if (typeof options.limit !== 'undefined' && options.limit !== null) {\n        activityCopyLimit = options.limit;\n      }\n    }\n\n    var body = {\n      target: target\n    };\n\n    if (typeof activityCopyLimit !== 'undefined' && activityCopyLimit !== null) {\n      body['activity_copy_limit'] = activityCopyLimit;\n    }\n\n    return this.client.post({\n      url: 'feed/' + this.feedUrl + '/following/',\n      body: body,\n      signature: this.signature\n    }, callback);\n  },\n  unfollow: function unfollow(targetSlug, targetUserId, optionsOrCallback, callback) {\n    /**\n     * Unfollow the given feed\n     * @method unfollow\n     * @memberof StreamFeed.prototype\n     * @param  {string}   targetSlug   Slug of the target feed\n     * @param  {string}   targetUserId [description]\n     * @param  {requestCallback|object} optionsOrCallback\n     * @param  {boolean}  optionOrCallback.keepHistory when provided the activities from target\n     *                                                 feed will not be kept in the feed\n     * @param  {requestCallback} callback     Callback to call on completion\n     * @return {object}                XHR request object\n     * @example feed.unfollow('user', '2', callback);\n     */\n    var options = {},\n        qs = {};\n    if (typeof optionsOrCallback === 'function') callback = optionsOrCallback;\n    if (_typeof(optionsOrCallback) === 'object') options = optionsOrCallback;\n    if (typeof options.keepHistory === 'boolean' && options.keepHistory) qs['keep_history'] = '1';\n    utils.validateFeedSlug(targetSlug);\n    utils.validateUserId(targetUserId);\n    var targetFeedId = targetSlug + ':' + targetUserId;\n    var xhr = this.client['delete']({\n      url: 'feed/' + this.feedUrl + '/following/' + targetFeedId + '/',\n      qs: qs,\n      signature: this.signature\n    }, callback);\n    return xhr;\n  },\n  following: function following(options, callback) {\n    /**\n     * List which feeds this feed is following\n     * @method following\n     * @memberof StreamFeed.prototype\n     * @param  {object}   options  Additional options\n     * @param  {string}   options.filter Filter to apply on search operation\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example feed.following({limit:10, filter: ['user:1', 'user:2']}, callback);\n     */\n    if (options !== undefined && options.filter) {\n      options.filter = options.filter.join(',');\n    }\n\n    return this.client.get({\n      url: 'feed/' + this.feedUrl + '/following/',\n      qs: options,\n      signature: this.signature\n    }, callback);\n  },\n  followers: function followers(options, callback) {\n    /**\n     * List the followers of this feed\n     * @method followers\n     * @memberof StreamFeed.prototype\n     * @param  {object}   options  Additional options\n     * @param  {string}   options.filter Filter to apply on search operation\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example\n     * feed.followers({limit:10, filter: ['user:1', 'user:2']}, callback);\n     */\n    if (options !== undefined && options.filter) {\n      options.filter = options.filter.join(',');\n    }\n\n    return this.client.get({\n      url: 'feed/' + this.feedUrl + '/followers/',\n      qs: options,\n      signature: this.signature\n    }, callback);\n  },\n  get: function get(options, callback) {\n    /**\n     * Reads the feed\n     * @method get\n     * @memberof StreamFeed.prototype\n     * @param  {object}   options  Additional options\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example feed.get({limit: 10, id_lte: 'activity-id'})\n     * @example feed.get({limit: 10, mark_seen: true})\n     */\n    var path;\n\n    if (options && options['mark_read'] && options['mark_read'].join) {\n      options['mark_read'] = options['mark_read'].join(',');\n    }\n\n    if (options && options['mark_seen'] && options['mark_seen'].join) {\n      options['mark_seen'] = options['mark_seen'].join(',');\n    }\n\n    this.client.replaceReactionOptions(options);\n\n    if (this.client.shouldUseEnrichEndpoint(options)) {\n      path = 'enrich/feed/';\n    } else {\n      path = 'feed/';\n    }\n\n    return this.client.get({\n      url: path + this.feedUrl + '/',\n      qs: options,\n      signature: this.signature\n    }, callback);\n  },\n  getReadOnlyToken: function getReadOnlyToken() {\n    /**\n     * Returns a token that allows only read operations\n     *\n     * @deprecated since version 4.0\n     * @method getReadOnlyToken\n     * @memberof StreamClient.prototype\n     * @param {string} feedSlug - The feed slug to get a read only token for\n     * @param {string} userId - The user identifier\n     * @return {string} token\n     * @example\n     * client.getReadOnlyToken('user', '1');\n     */\n    var feedId = '' + this.slug + this.userId;\n    return signing.JWTScopeToken(this.client.apiSecret, '*', 'read', {\n      feedId: feedId,\n      expireTokens: this.client.expireTokens\n    });\n  },\n  getReadWriteToken: function getReadWriteToken() {\n    /**\n     * Returns a token that allows read and write operations\n     * @deprecated since version 4.0\n     * @method getReadWriteToken\n     * @memberof StreamClient.prototype\n     * @param {string} feedSlug - The feed slug to get a read only token for\n     * @param {string} userId - The user identifier\n     * @return {string} token\n     * @example\n     * client.getReadWriteToken('user', '1');\n     */\n    var feedId = '' + this.slug + this.userId;\n    return signing.JWTScopeToken(this.client.apiSecret, '*', '*', {\n      feedId: feedId,\n      expireTokens: this.client.expireTokens\n    });\n  },\n  getActivityDetail: function getActivityDetail(activityId, options, callback) {\n    /**\n     * Retrieves one activity from a feed and adds enrichment\n     * @method getActivityDetail\n     * @memberof StreamFeed.prototype\n     * @param  {string}   activityId Identifier of activity to retrieve\n     * @param  {object}   options  Additional options\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example feed.getActivityDetail(activityId)\n     * @example feed.getActivityDetail(activityId, {withRecentReactions: true})\n     * @example feed.getActivityDetail(activityId, {withReactionCounts: true})\n     * @example feed.getActivityDetail(activityId, {withOwnReactions: true, withReactionCounts: true})\n     */\n    return this.get(_extends({\n      id_lte: activityId,\n      id_gte: activityId,\n      limit: 1\n    }, options || {}), callback);\n  },\n  getFayeClient: function getFayeClient() {\n    /**\n     * Returns the current faye client object\n     * @method getFayeClient\n     * @memberof StreamFeed.prototype\n     * @access private\n     * @return {object} Faye client\n     */\n    return this.client.getFayeClient();\n  },\n  subscribe: function subscribe(callback) {\n    /**\n     * Subscribes to any changes in the feed, return a promise\n     * @method subscribe\n     * @memberof StreamFeed.prototype\n     * @param  {function} callback Callback to call on completion\n     * @return {Promise}           Promise object\n     * @example\n     * feed.subscribe(callback).then(function(){\n     * \t\tconsole.log('we are now listening to changes');\n     * });\n     */\n    if (!this.client.appId) {\n      throw new errors.SiteError('Missing app id, which is needed to subscribe, use var client = stream.connect(key, secret, appId);');\n    }\n\n    var subscription = this.getFayeClient().subscribe('/' + this.notificationChannel, callback);\n    this.client.subscriptions['/' + this.notificationChannel] = {\n      token: this.token,\n      userId: this.notificationChannel,\n      fayeSubscription: subscription\n    };\n    return subscription;\n  },\n  unsubscribe: function unsubscribe() {\n    /**\n     * Cancel updates created via feed.subscribe()\n     * @return void\n     */\n    var streamSubscription = this.client.subscriptions['/' + this.notificationChannel];\n\n    if (streamSubscription) {\n      delete this.client.subscriptions['/' + this.notificationChannel];\n      streamSubscription.fayeSubscription.cancel();\n    }\n  },\n  updateActivityToTargets: function updateActivityToTargets(foreign_id, time, new_targets, added_targets, removed_targets) {\n    /**\n     * Updates an activity's \"to\" fields\n     * @since 3.10.0\n     * @param {string} foreign_id The foreign_id of the activity to update\n     * @param {string} time The time of the activity to update\n     * @param {array} new_targets Set the new \"to\" targets for the activity - will remove old targets\n     * @param {array} added_targets Add these new targets to the activity\n     * @param {array} removed_targets Remove these targets from the activity\n     */\n    if (!foreign_id) {\n      throw new Error('Missing `foreign_id` parameter!');\n    } else if (!time) {\n      throw new Error('Missing `time` parameter!');\n    }\n\n    if (!new_targets && !added_targets && !removed_targets) {\n      throw new Error('Requires you to provide at least one parameter for `new_targets`, `added_targets`, or `removed_targets` - example: `updateActivityToTargets(\"foreignID:1234\", new Date(), [new_targets...], [added_targets...], [removed_targets...])`');\n    }\n\n    if (new_targets) {\n      if (added_targets || removed_targets) {\n        throw new Error(\"Can't include add_targets or removed_targets if you're also including new_targets\");\n      }\n    }\n\n    if (added_targets && removed_targets) {\n      // brute force - iterate through added, check to see if removed contains that element\n      for (var i = 0; i < added_targets.length; i++) {\n        // would normally use Array.prototype.includes here, but it's not supported in Node.js v4 :(\n        for (var j = 0; j < removed_targets.length; j++) {\n          if (removed_targets[j] == added_targets[i]) {\n            throw new Error(\"Can't have the same feed ID in added_targets and removed_targets.\");\n          }\n        }\n      }\n    }\n\n    var body = {\n      foreign_id: foreign_id,\n      time: time\n    };\n\n    if (new_targets) {\n      body['new_targets'] = new_targets;\n    }\n\n    if (added_targets) {\n      body['added_targets'] = added_targets;\n    }\n\n    if (removed_targets) {\n      body['removed_targets'] = removed_targets;\n    }\n\n    return this.client.post({\n      url: 'feed_targets/' + this.feedUrl + '/activity_to_targets/',\n      signature: this.signature,\n      body: body\n    });\n  }\n};\nmodule.exports = StreamFeed;","map":{"version":3,"sources":["/Users/batson24/Desktop/Date_Site/frontend/node_modules/getstream/lib/lib/feed.js"],"names":["_extends","require","_typeof","errors","utils","isObject","isPlainObject","StreamUser","signing","StreamFeed","initialize","apply","arguments","replaceStreamObjects","obj","cloned","Array","isArray","map","v","k","_streamRef","undefined","prototype","client","feedSlug","userId","token","FeedError","indexOf","validateFeedSlug","validateUserId","apiSecret","slug","id","feedUrl","replace","feedTogether","signature","notificationChannel","appId","enrichByDefault","addActivity","activity","callback","actor","currentUser","post","url","body","removeActivity","activityId","identifier","foreignId","params","qs","addActivities","activities","data","xhr","follow","targetSlug","targetUserId","options","activityCopyLimit","last","length","call","target","limit","unfollow","optionsOrCallback","keepHistory","targetFeedId","following","filter","join","get","followers","path","replaceReactionOptions","shouldUseEnrichEndpoint","getReadOnlyToken","feedId","JWTScopeToken","expireTokens","getReadWriteToken","getActivityDetail","id_lte","id_gte","getFayeClient","subscribe","SiteError","subscription","subscriptions","fayeSubscription","unsubscribe","streamSubscription","cancel","updateActivityToTargets","foreign_id","time","new_targets","added_targets","removed_targets","Error","i","j","module","exports"],"mappings":"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","sourcesContent":["var _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _typeof = require(\"@babel/runtime/helpers/typeof\");\n\nvar errors = require('./errors');\n\nvar utils = require('./utils');\n\nvar isObject = require('lodash/isObject');\n\nvar isPlainObject = require('lodash/isPlainObject');\n\nvar StreamUser = require('./user');\n\nvar signing = require('./signing');\n\nvar StreamFeed = function StreamFeed() {\n  /**\n   * Manage api calls for specific feeds\n   * The feed object contains convenience functions such add activity, remove activity etc\n   * @class StreamFeed\n   */\n  this.initialize.apply(this, arguments);\n};\n\nfunction replaceStreamObjects(obj) {\n  var cloned = obj;\n\n  if (Array.isArray(obj)) {\n    cloned = obj.map(function (v) {\n      return replaceStreamObjects(v);\n    });\n  } else if (isPlainObject(obj)) {\n    cloned = {};\n\n    for (var k in obj) {\n      cloned[k] = replaceStreamObjects(obj[k]);\n    }\n  } else if (isObject(obj) && obj._streamRef !== undefined) {\n    cloned = obj._streamRef();\n  }\n\n  return cloned;\n}\n\nStreamFeed.prototype = {\n  initialize: function initialize(client, feedSlug, userId, token) {\n    /**\n     * Initialize a feed object\n     * @method intialize\n     * @memberof StreamFeed.prototype\n     * @param {StreamClient} client - The stream client this feed is constructed from\n     * @param {string} feedSlug - The feed slug\n     * @param {string} userId - The user id\n     * @param {string} [token] - The authentication token\n     */\n    if (!feedSlug || !userId) {\n      throw new errors.FeedError('Please provide a feed slug and user id, ie client.feed(\"user\", \"1\")');\n    }\n\n    if (feedSlug.indexOf(':') !== -1) {\n      throw new errors.FeedError('Please initialize the feed using client.feed(\"user\", \"1\") not client.feed(\"user:1\")');\n    }\n\n    utils.validateFeedSlug(feedSlug);\n    utils.validateUserId(userId); // raise an error if there is no token\n\n    if (!this.apiSecret && !token) {\n      throw new errors.FeedError('Missing token, in client side mode please provide a feed secret');\n    }\n\n    this.client = client;\n    this.slug = feedSlug;\n    this.userId = userId;\n    this.id = this.slug + ':' + this.userId;\n    this.token = token;\n    this.feedUrl = this.id.replace(':', '/');\n    this.feedTogether = this.id.replace(':', '');\n    this.signature = this.feedTogether + ' ' + this.token; // faye setup\n\n    this.notificationChannel = 'site-' + this.client.appId + '-feed-' + this.feedTogether;\n    this.enrichByDefault = false;\n  },\n  addActivity: function addActivity(activity, callback) {\n    /**\n     * Adds the given activity to the feed and\n     * calls the specified callback\n     * @method addActivity\n     * @memberof StreamFeed.prototype\n     * @param {object} activity - The activity to add\n     * @param {requestCallback} callback - Callback to call on completion\n     * @return {Promise} Promise object\n     */\n    activity = replaceStreamObjects(activity);\n\n    if (!activity.actor && this.client.currentUser) {\n      activity.actor = this.client.currentUser._streamRef();\n    }\n\n    return this.client.post({\n      url: 'feed/' + this.feedUrl + '/',\n      body: activity,\n      signature: this.signature\n    }, callback);\n  },\n  removeActivity: function removeActivity(activityId, callback) {\n    /**\n     * Removes the activity by activityId\n     * @method removeActivity\n     * @memberof StreamFeed.prototype\n     * @param  {string}   activityId Identifier of activity to remove\n     * @param  {requestCallback} callback   Callback to call on completion\n     * @return {Promise} Promise object\n     * @example\n     * feed.removeActivity(activityId);\n     * @example\n     * feed.removeActivity({'foreignId': foreignId});\n     */\n    var identifier = activityId.foreignId ? activityId.foreignId : activityId;\n    var params = {};\n\n    if (activityId.foreignId) {\n      params['foreign_id'] = '1';\n    }\n\n    return this.client['delete']({\n      url: 'feed/' + this.feedUrl + '/' + identifier + '/',\n      qs: params,\n      signature: this.signature\n    }, callback);\n  },\n  addActivities: function addActivities(activities, callback) {\n    /**\n     * Adds the given activities to the feed and calls the specified callback\n     * @method addActivities\n     * @memberof StreamFeed.prototype\n     * @param  {Array}   activities Array of activities to add\n     * @param  {requestCallback} callback   Callback to call on completion\n     * @return {Promise}               XHR request object\n     */\n    activities = replaceStreamObjects(activities);\n    var data = {\n      activities: activities\n    };\n    var xhr = this.client.post({\n      url: 'feed/' + this.feedUrl + '/',\n      body: data,\n      signature: this.signature\n    }, callback);\n    return xhr;\n  },\n  follow: function follow(targetSlug, targetUserId, options, callback) {\n    /**\n     * Follows the given target feed\n     * @method follow\n     * @memberof StreamFeed.prototype\n     * @param  {string}   targetSlug   Slug of the target feed\n     * @param  {string}   targetUserId User identifier of the target feed\n     * @param  {object}   options      Additional options\n     * @param  {number}   options.activityCopyLimit Limit the amount of activities copied over on follow\n     * @param  {requestCallback} callback     Callback to call on completion\n     * @return {Promise}  Promise object\n     * @example feed.follow('user', '1');\n     * @example feed.follow('user', '1', callback);\n     * @example feed.follow('user', '1', options, callback);\n     */\n    if (targetUserId instanceof StreamUser) {\n      targetUserId = targetUserId.id;\n    }\n\n    utils.validateFeedSlug(targetSlug);\n    utils.validateUserId(targetUserId);\n    var activityCopyLimit;\n    var last = arguments[arguments.length - 1]; // callback is always the last argument\n\n    callback = last.call ? last : undefined;\n    var target = targetSlug + ':' + targetUserId; // check for additional options\n\n    if (options && !options.call) {\n      if (typeof options.limit !== 'undefined' && options.limit !== null) {\n        activityCopyLimit = options.limit;\n      }\n    }\n\n    var body = {\n      target: target\n    };\n\n    if (typeof activityCopyLimit !== 'undefined' && activityCopyLimit !== null) {\n      body['activity_copy_limit'] = activityCopyLimit;\n    }\n\n    return this.client.post({\n      url: 'feed/' + this.feedUrl + '/following/',\n      body: body,\n      signature: this.signature\n    }, callback);\n  },\n  unfollow: function unfollow(targetSlug, targetUserId, optionsOrCallback, callback) {\n    /**\n     * Unfollow the given feed\n     * @method unfollow\n     * @memberof StreamFeed.prototype\n     * @param  {string}   targetSlug   Slug of the target feed\n     * @param  {string}   targetUserId [description]\n     * @param  {requestCallback|object} optionsOrCallback\n     * @param  {boolean}  optionOrCallback.keepHistory when provided the activities from target\n     *                                                 feed will not be kept in the feed\n     * @param  {requestCallback} callback     Callback to call on completion\n     * @return {object}                XHR request object\n     * @example feed.unfollow('user', '2', callback);\n     */\n    var options = {},\n        qs = {};\n    if (typeof optionsOrCallback === 'function') callback = optionsOrCallback;\n    if (_typeof(optionsOrCallback) === 'object') options = optionsOrCallback;\n    if (typeof options.keepHistory === 'boolean' && options.keepHistory) qs['keep_history'] = '1';\n    utils.validateFeedSlug(targetSlug);\n    utils.validateUserId(targetUserId);\n    var targetFeedId = targetSlug + ':' + targetUserId;\n    var xhr = this.client['delete']({\n      url: 'feed/' + this.feedUrl + '/following/' + targetFeedId + '/',\n      qs: qs,\n      signature: this.signature\n    }, callback);\n    return xhr;\n  },\n  following: function following(options, callback) {\n    /**\n     * List which feeds this feed is following\n     * @method following\n     * @memberof StreamFeed.prototype\n     * @param  {object}   options  Additional options\n     * @param  {string}   options.filter Filter to apply on search operation\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example feed.following({limit:10, filter: ['user:1', 'user:2']}, callback);\n     */\n    if (options !== undefined && options.filter) {\n      options.filter = options.filter.join(',');\n    }\n\n    return this.client.get({\n      url: 'feed/' + this.feedUrl + '/following/',\n      qs: options,\n      signature: this.signature\n    }, callback);\n  },\n  followers: function followers(options, callback) {\n    /**\n     * List the followers of this feed\n     * @method followers\n     * @memberof StreamFeed.prototype\n     * @param  {object}   options  Additional options\n     * @param  {string}   options.filter Filter to apply on search operation\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example\n     * feed.followers({limit:10, filter: ['user:1', 'user:2']}, callback);\n     */\n    if (options !== undefined && options.filter) {\n      options.filter = options.filter.join(',');\n    }\n\n    return this.client.get({\n      url: 'feed/' + this.feedUrl + '/followers/',\n      qs: options,\n      signature: this.signature\n    }, callback);\n  },\n  get: function get(options, callback) {\n    /**\n     * Reads the feed\n     * @method get\n     * @memberof StreamFeed.prototype\n     * @param  {object}   options  Additional options\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example feed.get({limit: 10, id_lte: 'activity-id'})\n     * @example feed.get({limit: 10, mark_seen: true})\n     */\n    var path;\n\n    if (options && options['mark_read'] && options['mark_read'].join) {\n      options['mark_read'] = options['mark_read'].join(',');\n    }\n\n    if (options && options['mark_seen'] && options['mark_seen'].join) {\n      options['mark_seen'] = options['mark_seen'].join(',');\n    }\n\n    this.client.replaceReactionOptions(options);\n\n    if (this.client.shouldUseEnrichEndpoint(options)) {\n      path = 'enrich/feed/';\n    } else {\n      path = 'feed/';\n    }\n\n    return this.client.get({\n      url: path + this.feedUrl + '/',\n      qs: options,\n      signature: this.signature\n    }, callback);\n  },\n  getReadOnlyToken: function getReadOnlyToken() {\n    /**\n     * Returns a token that allows only read operations\n     *\n     * @deprecated since version 4.0\n     * @method getReadOnlyToken\n     * @memberof StreamClient.prototype\n     * @param {string} feedSlug - The feed slug to get a read only token for\n     * @param {string} userId - The user identifier\n     * @return {string} token\n     * @example\n     * client.getReadOnlyToken('user', '1');\n     */\n    var feedId = '' + this.slug + this.userId;\n    return signing.JWTScopeToken(this.client.apiSecret, '*', 'read', {\n      feedId: feedId,\n      expireTokens: this.client.expireTokens\n    });\n  },\n  getReadWriteToken: function getReadWriteToken() {\n    /**\n     * Returns a token that allows read and write operations\n     * @deprecated since version 4.0\n     * @method getReadWriteToken\n     * @memberof StreamClient.prototype\n     * @param {string} feedSlug - The feed slug to get a read only token for\n     * @param {string} userId - The user identifier\n     * @return {string} token\n     * @example\n     * client.getReadWriteToken('user', '1');\n     */\n    var feedId = '' + this.slug + this.userId;\n    return signing.JWTScopeToken(this.client.apiSecret, '*', '*', {\n      feedId: feedId,\n      expireTokens: this.client.expireTokens\n    });\n  },\n  getActivityDetail: function getActivityDetail(activityId, options, callback) {\n    /**\n     * Retrieves one activity from a feed and adds enrichment\n     * @method getActivityDetail\n     * @memberof StreamFeed.prototype\n     * @param  {string}   activityId Identifier of activity to retrieve\n     * @param  {object}   options  Additional options\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example feed.getActivityDetail(activityId)\n     * @example feed.getActivityDetail(activityId, {withRecentReactions: true})\n     * @example feed.getActivityDetail(activityId, {withReactionCounts: true})\n     * @example feed.getActivityDetail(activityId, {withOwnReactions: true, withReactionCounts: true})\n     */\n    return this.get(_extends({\n      id_lte: activityId,\n      id_gte: activityId,\n      limit: 1\n    }, options || {}), callback);\n  },\n  getFayeClient: function getFayeClient() {\n    /**\n     * Returns the current faye client object\n     * @method getFayeClient\n     * @memberof StreamFeed.prototype\n     * @access private\n     * @return {object} Faye client\n     */\n    return this.client.getFayeClient();\n  },\n  subscribe: function subscribe(callback) {\n    /**\n     * Subscribes to any changes in the feed, return a promise\n     * @method subscribe\n     * @memberof StreamFeed.prototype\n     * @param  {function} callback Callback to call on completion\n     * @return {Promise}           Promise object\n     * @example\n     * feed.subscribe(callback).then(function(){\n     * \t\tconsole.log('we are now listening to changes');\n     * });\n     */\n    if (!this.client.appId) {\n      throw new errors.SiteError('Missing app id, which is needed to subscribe, use var client = stream.connect(key, secret, appId);');\n    }\n\n    var subscription = this.getFayeClient().subscribe('/' + this.notificationChannel, callback);\n    this.client.subscriptions['/' + this.notificationChannel] = {\n      token: this.token,\n      userId: this.notificationChannel,\n      fayeSubscription: subscription\n    };\n    return subscription;\n  },\n  unsubscribe: function unsubscribe() {\n    /**\n     * Cancel updates created via feed.subscribe()\n     * @return void\n     */\n    var streamSubscription = this.client.subscriptions['/' + this.notificationChannel];\n\n    if (streamSubscription) {\n      delete this.client.subscriptions['/' + this.notificationChannel];\n      streamSubscription.fayeSubscription.cancel();\n    }\n  },\n  updateActivityToTargets: function updateActivityToTargets(foreign_id, time, new_targets, added_targets, removed_targets) {\n    /**\n     * Updates an activity's \"to\" fields\n     * @since 3.10.0\n     * @param {string} foreign_id The foreign_id of the activity to update\n     * @param {string} time The time of the activity to update\n     * @param {array} new_targets Set the new \"to\" targets for the activity - will remove old targets\n     * @param {array} added_targets Add these new targets to the activity\n     * @param {array} removed_targets Remove these targets from the activity\n     */\n    if (!foreign_id) {\n      throw new Error('Missing `foreign_id` parameter!');\n    } else if (!time) {\n      throw new Error('Missing `time` parameter!');\n    }\n\n    if (!new_targets && !added_targets && !removed_targets) {\n      throw new Error('Requires you to provide at least one parameter for `new_targets`, `added_targets`, or `removed_targets` - example: `updateActivityToTargets(\"foreignID:1234\", new Date(), [new_targets...], [added_targets...], [removed_targets...])`');\n    }\n\n    if (new_targets) {\n      if (added_targets || removed_targets) {\n        throw new Error(\"Can't include add_targets or removed_targets if you're also including new_targets\");\n      }\n    }\n\n    if (added_targets && removed_targets) {\n      // brute force - iterate through added, check to see if removed contains that element\n      for (var i = 0; i < added_targets.length; i++) {\n        // would normally use Array.prototype.includes here, but it's not supported in Node.js v4 :(\n        for (var j = 0; j < removed_targets.length; j++) {\n          if (removed_targets[j] == added_targets[i]) {\n            throw new Error(\"Can't have the same feed ID in added_targets and removed_targets.\");\n          }\n        }\n      }\n    }\n\n    var body = {\n      foreign_id: foreign_id,\n      time: time\n    };\n\n    if (new_targets) {\n      body['new_targets'] = new_targets;\n    }\n\n    if (added_targets) {\n      body['added_targets'] = added_targets;\n    }\n\n    if (removed_targets) {\n      body['removed_targets'] = removed_targets;\n    }\n\n    return this.client.post({\n      url: 'feed_targets/' + this.feedUrl + '/activity_to_targets/',\n      signature: this.signature,\n      body: body\n    });\n  }\n};\nmodule.exports = StreamFeed;"]},"metadata":{},"sourceType":"script"}