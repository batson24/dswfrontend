{"ast":null,"code":"var _jsxFileName = \"/Users/batson24/Desktop/Date_Site/frontend/src/Components/Socketpeer.jsx\";\nimport React, { useEffect, useState, useRef } from 'react'; // import './App.css';\n\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\nconst Container = styled.div`\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`;\nconst Row = styled.div`\n  display: flex;\n  width: 100%;\n`;\nconst Video = styled.video`\n  border: 1px solid blue;\n  width: 50%;\n  height: 50%;\n`;\n\nfunction Socketpeer() {\n  const [yourID, setYourID] = useState(\"\");\n  const [users, setUsers] = useState({});\n  const [stream, setStream] = useState();\n  const [receivingCall, setReceivingCall] = useState(false);\n  const [caller, setCaller] = useState(\"\");\n  const [callerSignal, setCallerSignal] = useState();\n  const [callAccepted, setCallAccepted] = useState(false);\n  const userVideo = useRef();\n  const partnerVideo = useRef();\n  const socket = useRef();\n  useEffect(() => {\n    socket.current = io.connect(\"/\");\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      setStream(stream);\n\n      if (userVideo.current) {\n        userVideo.current.srcObject = stream;\n      }\n    });\n    socket.current.on(\"yourID\", id => {\n      setYourID(id);\n    });\n    socket.current.on(\"allUsers\", users => {\n      setUsers(users);\n    });\n    socket.current.on(\"hey\", data => {\n      setReceivingCall(true);\n      setCaller(data.from);\n      setCallerSignal(data.signal);\n    });\n  }, []);\n\n  function callPeer(id) {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      config: {\n        iceServers: [{\n          urls: \"stun:numb.viagenie.ca\",\n          username: \"sultan1640@gmail.com\",\n          credential: \"98376683\"\n        }, {\n          urls: \"turn:numb.viagenie.ca\",\n          username: \"sultan1640@gmail.com\",\n          credential: \"98376683\"\n        }]\n      },\n      stream: stream\n    });\n    peer.on(\"signal\", data => {\n      socket.current.emit(\"callUser\", {\n        userToCall: id,\n        signalData: data,\n        from: yourID\n      });\n    });\n    peer.on(\"stream\", stream => {\n      if (partnerVideo.current) {\n        partnerVideo.current.srcObject = stream;\n      }\n    });\n    socket.current.on(\"callAccepted\", signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n  }\n\n  function acceptCall() {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream: stream\n    });\n    peer.on(\"signal\", data => {\n      socket.current.emit(\"acceptCall\", {\n        signal: data,\n        to: caller\n      });\n    });\n    peer.on(\"stream\", stream => {\n      partnerVideo.current.srcObject = stream;\n    });\n    peer.signal(callerSignal);\n  }\n\n  let UserVideo;\n\n  if (stream) {\n    UserVideo = /*#__PURE__*/React.createElement(Video, {\n      playsInline: true,\n      muted: true,\n      ref: userVideo,\n      autoPlay: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    });\n  }\n\n  let PartnerVideo;\n\n  if (callAccepted) {\n    PartnerVideo = /*#__PURE__*/React.createElement(Video, {\n      playsInline: true,\n      ref: partnerVideo,\n      autoPlay: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    });\n  }\n\n  let incomingCall;\n\n  if (receivingCall) {\n    incomingCall = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }, caller, \" is calling you\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: acceptCall,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }, \"Accept\"));\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, UserVideo, PartnerVideo), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, Object.keys(users).map(key => {\n    if (key === yourID) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => callPeer(key),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, \"Call \", key);\n  })), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }, incomingCall));\n}\n\nexport default Socketpeer;","map":{"version":3,"sources":["/Users/batson24/Desktop/Date_Site/frontend/src/Components/Socketpeer.jsx"],"names":["React","useEffect","useState","useRef","io","Peer","styled","Container","div","Row","Video","video","Socketpeer","yourID","setYourID","users","setUsers","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","userVideo","partnerVideo","socket","current","connect","navigator","mediaDevices","getUserMedia","audio","then","srcObject","on","id","data","from","signal","callPeer","peer","initiator","trickle","config","iceServers","urls","username","credential","emit","userToCall","signalData","acceptCall","to","UserVideo","PartnerVideo","incomingCall","Object","keys","map","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\n// import './App.css';\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\nconst Video = styled.video`\n  border: 1px solid blue;\n  width: 50%;\n  height: 50%;\n`;\n\nfunction Socketpeer() {\n  const [yourID, setYourID] = useState(\"\");\n  const [users, setUsers] = useState({});\n  const [stream, setStream] = useState();\n  const [receivingCall, setReceivingCall] = useState(false);\n  const [caller, setCaller] = useState(\"\");\n  const [callerSignal, setCallerSignal] = useState();\n  const [callAccepted, setCallAccepted] = useState(false);\n\n  const userVideo = useRef();\n  const partnerVideo = useRef();\n  const socket = useRef();\n\n  useEffect(() => {\n    socket.current = io.connect(\"/\");\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\n      setStream(stream);\n      if (userVideo.current) {\n        userVideo.current.srcObject = stream;\n      }\n    })\n\n    socket.current.on(\"yourID\", (id) => {\n      setYourID(id);\n    })\n    socket.current.on(\"allUsers\", (users) => {\n      setUsers(users);\n    })\n\n    socket.current.on(\"hey\", (data) => {\n      setReceivingCall(true);\n      setCaller(data.from);\n      setCallerSignal(data.signal);\n    })\n  }, []);\n\n  function callPeer(id) {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      config: {\n\n        iceServers: [\n            {\n                urls: \"stun:numb.viagenie.ca\",\n                username: \"sultan1640@gmail.com\",\n                credential: \"98376683\"\n            },\n            {\n                urls: \"turn:numb.viagenie.ca\",\n                username: \"sultan1640@gmail.com\",\n                credential: \"98376683\"\n            }\n        ]\n    },\n      stream: stream,\n    });\n\n    peer.on(\"signal\", data => {\n      socket.current.emit(\"callUser\", { userToCall: id, signalData: data, from: yourID })\n    })\n\n    peer.on(\"stream\", stream => {\n      if (partnerVideo.current) {\n        partnerVideo.current.srcObject = stream;\n      }\n    });\n\n    socket.current.on(\"callAccepted\", signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    })\n\n  }\n\n  function acceptCall() {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream: stream,\n    });\n    peer.on(\"signal\", data => {\n      socket.current.emit(\"acceptCall\", { signal: data, to: caller })\n    })\n\n    peer.on(\"stream\", stream => {\n      partnerVideo.current.srcObject = stream;\n    });\n\n    peer.signal(callerSignal);\n  }\n\n  let UserVideo;\n  if (stream) {\n    UserVideo = (\n      <Video playsInline muted ref={userVideo} autoPlay />\n    );\n  }\n\n  let PartnerVideo;\n  if (callAccepted) {\n    PartnerVideo = (\n      <Video playsInline ref={partnerVideo} autoPlay />\n    );\n  }\n\n  let incomingCall;\n  if (receivingCall) {\n    incomingCall = (\n      <div>\n        <h1>{caller} is calling you</h1>\n        <button onClick={acceptCall}>Accept</button>\n      </div>\n    )\n  }\n  return (\n    <Container>\n      <Row>\n        {UserVideo}\n        {PartnerVideo}\n      </Row>\n      <Row>\n        {Object.keys(users).map(key => {\n          if (key === yourID) {\n            return null;\n          }\n          return (\n            <button onClick={() => callPeer(key)}>Call {key}</button>\n          );\n        })}\n      </Row>\n      <Row>\n        {incomingCall}\n      </Row>\n    </Container>\n  );\n}\n\nexport default Socketpeer"]},"metadata":{},"sourceType":"module"}